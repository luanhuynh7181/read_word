[
  {
    "code_sample": [
      "def is_fib(x):",
      "    a, b = 0, 1",
      "    while b < x:",
      "        a, b = b, a + b",
      "    return b == x or x == 0",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_fib = -1",
      "for num in arr:",
      "    if is_fib(num):",
      "        if min_fib == -1 or num < min_fib:",
      "            min_fib = num",
      "print(min_fib)"
    ],
    "id": "Tìm số Fibonacci nhỏ nhất Input:",
    "input_sample": [
      "5",
      "4 6 7 13 8"
    ],
    "output_sample": [
      "4"
    ],
    "point": "160",
    "short_name": "MINFIB"
  },
  {
    "code_sample": [
      "def is_fib(x):",
      "    a, b = 0, 1",
      "    while b < x:",
      "        a, b = b, a + b",
      "    return b == x or x == 0",
      "",
      "n = int(input())",
      "if is_fib(n):",
      "    print(\"YES\")",
      "else:",
      "    print(\"NO\")"
    ],
    "id": "Kiểm tra số là Fibonacci hay không",
    "input_sample": [
      "21"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "80",
    "short_name": "ISFIB"
  },
  {
    "code_sample": [
      "def is_fib(x):",
      "    a, b = 0, 1",
      "    while b < x:",
      "        a, b = b, a + b",
      "    return b == x or x == 0",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    if is_fib(num):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số Fibonacci trong dãy",
    "input_sample": [
      "5",
      "4 6 7 13 8"
    ],
    "output_sample": [
      "3"
    ],
    "point": "160",
    "short_name": "COUNTFIB"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max1 = 0",
      "max2 = 0",
      "for num in arr:",
      "    if num > max1:",
      "        max2 = max1",
      "        max1 = num",
      "    elif num > max2 and num != max1:",
      "        max2 = num",
      "print(max1 + max2)"
    ],
    "id": "Tìm phép cộng lớn nhất của hai số",
    "input_sample": [
      "5",
      "1 2 3 4 5"
    ],
    "output_sample": [
      "9"
    ],
    "point": "130",
    "short_name": "MAXSUM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_num = arr[0]",
      "min_num = arr[0]",
      "for num in arr:",
      "    if num > max_num:",
      "        max_num = num",
      "    if num < min_num:",
      "        min_num = num",
      "print(max_num - min_num)"
    ],
    "id": "Tìm hiệu lớn nhất của hai số",
    "input_sample": [
      "5",
      "2 9 5 1 7"
    ],
    "output_sample": [
      "8"
    ],
    "point": "130",
    "short_name": "MAXDIFF"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr = list(set(arr))",
      "if len(arr) < 3:",
      "    print(-1)",
      "else:",
      "    arr.sort(reverse=True)",
      "    print(arr[0] * arr[1] * arr[2])"
    ],
    "id": "Tìm số lớn nhất bằng tích của ba số",
    "input_sample": [
      "5",
      "1 2 3 4 5"
    ],
    "output_sample": [
      "60"
    ],
    "point": "170",
    "short_name": "MAXPROD3"
  },
  {
    "code_sample": [
      "s = input()",
      "count = {}",
      "for c in s:",
      "    count[c] = count.get(c, 0) + 1",
      "",
      "res = 'No unique character'",
      "for c in s:",
      "    if count[c] == 1:",
      "        res = c",
      "        break",
      "print(res)"
    ],
    "id": "Tìm ký tự không lặp đầu tiên",
    "input_sample": [
      "swiss"
    ],
    "output_sample": [
      "w"
    ],
    "point": "160",
    "short_name": "FIRSTUNIQ"
  },
  {
    "code_sample": [
      "def is_fib(x):",
      "    a, b = 0, 1",
      "    while b < x:",
      "        a, b = b, a + b",
      "    return b == x or x == 0",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_fib = -1",
      "for num in arr:",
      "    if is_fib(num):",
      "        if min_fib == -1 or num < min_fib:",
      "            min_fib = num",
      "print(min_fib)"
    ],
    "id": "Tìm số Fibonacci nhỏ nhất",
    "input_sample": [
      "5",
      "4 6 7 13 8"
    ],
    "output_sample": [
      "4"
    ],
    "point": "160",
    "short_name": "MINFIB"
  },
  {
    "code_sample": [
      "s = input()",
      "char = input()",
      "count = s.count(char)",
      "print(count)"
    ],
    "id": "Đếm số lần lặp lại của một ký tự cho trước",
    "input_sample": [
      "hello world",
      "o"
    ],
    "output_sample": [
      "2"
    ],
    "point": "90",
    "short_name": "COUNTCHAR"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "s = input()",
      "prime_sum = 0",
      "lower_count = 0",
      "for char in s:",
      "    if char.isdigit() and is_prime(int(char)):",
      "        prime_sum += int(char)",
      "    elif char.islower():",
      "        lower_count += 1",
      "print(prime_sum, lower_count)"
    ],
    "id": "Tìm tổng các số nguyên tố và số ký tự thường",
    "input_sample": [
      "abc123!@#"
    ],
    "output_sample": [
      "5 3"
    ],
    "point": "60",
    "short_name": "SUMPRIMEANDLOWER"
  },
  {
    "code_sample": [
      "import math",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_prime = -1",
      "for num in arr:",
      "    if is_prime(num) and num > max_prime:",
      "        max_prime = num",
      "if max_prime == -1:",
      "    print(-1)",
      "else:",
      "    print(max_prime)"
    ],
    "id": "Tìm số nguyên tố lớn nhất trong dãy",
    "input_sample": [
      "6",
      "2 4 5 7 9 7"
    ],
    "output_sample": [
      "7"
    ],
    "point": "60",
    "short_name": "MAXPRIMESEQ"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_sum = float('inf')",
      "current_sum = 0",
      "for num in arr:",
      "    current_sum += num",
      "    if current_sum < min_sum:",
      "        min_sum = current_sum",
      "    if current_sum > 0:",
      "        current_sum = 0",
      "print(min_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất",
    "input_sample": [
      "5",
      "1 2 -3 4 -2 5"
    ],
    "output_sample": [
      -3
    ],
    "point": "60",
    "short_name": "MINSUMSEQ"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "current_sum = 0",
      "for num in arr:",
      "    if num > 0:",
      "        current_sum += num",
      "    else:",
      "        if current_sum > max_sum:",
      "            max_sum = current_sum",
      "        current_sum = 0",
      "if current_sum > max_sum:",
      "    max_sum = current_sum",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con có tổng lớn nhất không chứa số âm",
    "input_sample": [
      "6",
      "1 2 -3 4 -2 5"
    ],
    "output_sample": [
      7
    ],
    "point": "60",
    "short_name": "MAXPOSSEQ"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_sum = -float('inf')",
      "for i in range(n - k + 1):",
      "    current_sum = sum(arr[i:i+k])",
      "    for j in range(i+k, n):",
      "        current_sum += arr[j]",
      "        if current_sum > max_sum:",
      "            max_sum = current_sum",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con có tổng lớn nhất với độ dài tối thiểu k",
    "input_sample": [
      "6 3",
      "1 2 -3 4 -2 5"
    ],
    "output_sample": [
      8
    ],
    "point": "60",
    "short_name": "MAXSUMK"
  },
  {
    "code_sample": [
      "s = input()",
      "count = 0",
      "for char in s:",
      "    if char != ' ':",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng ký tự không phải khoảng trắng trong xâu",
    "input_sample": [
      "Hello World!"
    ],
    "output_sample": [
      "10"
    ],
    "point": "30",
    "short_name": "COUNTNONSPACE"
  },
  {
    "code_sample": [
      "s = input()",
      "word = input()",
      "count = s.split().count(word)",
      "print(count)"
    ],
    "id": "Đếm số lần xuất hiện của một từ cho trước",
    "input_sample": [
      "Hello world world",
      "world"
    ],
    "output_sample": [
      "2"
    ],
    "point": "40",
    "short_name": "COUNTWORD"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_word = max(words, key=len)",
      "print(max_word)"
    ],
    "id": "Tìm từ dài nhất trong xâu",
    "input_sample": [
      "hello world this is a test"
    ],
    "output_sample": [
      "hello"
    ],
    "point": "40",
    "short_name": "MAXWORD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "m = int(input())",
      "arr.append(m)",
      "arr.sort()",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Tạo số lớn nhất có thể bằng cách thêm một số",
    "input_sample": [
      "5",
      "3 1 9 7 2",
      "10"
    ],
    "output_sample": [
      "1 2 3 7 9 10"
    ],
    "point": "50",
    "short_name": "MAXWITHM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort(reverse=True)",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Tạo số lớn nhất có thể từ dãy số có một số số bị trùng lặp",
    "input_sample": [
      "5",
      "3 1 9 7 7"
    ],
    "output_sample": [
      "9 7 7 3 1"
    ],
    "point": "50",
    "short_name": "MAXDUP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = {}",
      "for num in arr:",
      "    if num in count:",
      "        count[num] += 1",
      "    else:",
      "        count[num] = 1",
      "min_count = min(count.values())",
      "min_num = min([key for key, value in count.items() if value == min_count])",
      "print(min_num)"
    ],
    "id": "Tìm số xuất hiện ít nhất",
    "input_sample": [
      "6",
      "4 3 3 4 2 2"
    ],
    "output_sample": [
      "2"
    ],
    "point": "40",
    "short_name": "MINOCC"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "count = {}",
      "for num in arr:",
      "    if num in count:",
      "        count[num] += 1",
      "    else:",
      "        count[num] = 1",
      "result = len([num for num, c in count.items() if c == k])",
      "print(result)"
    ],
    "id": "Đếm số lượng số xuất hiện đúng k lần",
    "input_sample": [
      "6 2",
      "4 3 3 4 2 2"
    ],
    "output_sample": [
      "2"
    ],
    "point": "50",
    "short_name": "COUNTK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort(key=lambda x: (x % 2 == 0, x))",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Sắp xếp số lẻ trước, số chẵn sau",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "1 3 5 2 4 6"
    ],
    "point": "40",
    "short_name": "ODDEVEN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort(key=lambda x: (x % 3 == 0, x))",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Sắp xếp số theo thứ tự tăng dần nhưng các số là bội của 3 phải ở cuối",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "1 2 4 5 3 6"
    ],
    "point": "40",
    "short_name": "SORT3END"
  },
  {
    "code_sample": [
      "def is_palindrome(s):",
      "    return s == s[::-1]",
      "",
      "n = int(input())",
      "s = input()",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n + 1):",
      "        sub = s[i:j]",
      "        if len(sub) % 2 == 1 and is_palindrome(sub):",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng chuỗi con có độ dài lẻ và đối xứng",
    "input_sample": [
      "5",
      "abcba"
    ],
    "output_sample": [
      "5"
    ],
    "point": "50",
    "short_name": "COUNTPALINDROME"
  },
  {
    "code_sample": [
      "def is_palindrome(s):",
      "    return s == s[::-1]",
      "",
      "n, k = map(int, input().split())",
      "s = input()",
      "for i in range(n - k + 1):",
      "    for j in range(i + k, n + 1):",
      "        sub = s[i:j]",
      "        if is_palindrome(sub):",
      "            print('YES')",
      "            exit()",
      "print('NO')"
    ],
    "id": "Kiểm tra xem xâu có chứa chuỗi con đối xứng với độ dài tối thiểu k",
    "input_sample": [
      "7 3",
      "abacaba"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "50",
    "short_name": "PALINDROMECHK"
  },
  {
    "code_sample": [
      "s = input()",
      "total = 0",
      "for char in s:",
      "    if char.isdigit() and int(char) % 2 == 1:",
      "        total += int(char)",
      "print(total)"
    ],
    "id": "Tính tổng các chữ số lẻ trong xâu",
    "input_sample": [
      "123456789"
    ],
    "output_sample": [
      "25"
    ],
    "point": "30",
    "short_name": "ODDSUM"
  },
  {
    "code_sample": [
      "s = input()",
      "max_digit = -1",
      "for char in s:",
      "    if char.isdigit():",
      "        max_digit = max(max_digit, int(char))",
      "print(max_digit)"
    ],
    "id": "Tìm chữ số lớn nhất trong xâu",
    "input_sample": [
      "abc123xyz456"
    ],
    "output_sample": [
      "6"
    ],
    "point": "30",
    "short_name": "MAXDIGIT"
  },
  {
    "code_sample": [
      "s = input()",
      "sum_digits = sum(int(char) for char in s if char.isdigit())",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "if is_prime(sum_digits):",
      "    print('YES')",
      "else:",
      "    print('NO')"
    ],
    "id": "Kiểm tra xem tổng các chữ số trong xâu có phải là số nguyên tố hay không",
    "input_sample": [
      "abc123xyz456"
    ],
    "output_sample": [
      "NO"
    ],
    "point": "40",
    "short_name": "SUMPRIME"
  },
  {
    "code_sample": [
      "s = input()",
      "n, k = map(int, s.split())",
      "s = input()",
      "char_count = {}",
      "max_len = 0",
      "left = 0",
      "for right in range(n):",
      "    char_count[s[right]] = char_count.get(s[right], 0) + 1",
      "    while char_count[s[right]] > k:",
      "        char_count[s[left]] -= 1",
      "        left += 1",
      "    max_len = max(max_len, right - left + 1)",
      "print(max_len)"
    ],
    "id": "Tìm chuỗi con có độ dài lớn nhất mà không có ký tự nào lặp lại quá k lần",
    "input_sample": [
      "7 2",
      "abcacde"
    ],
    "output_sample": [
      "5"
    ],
    "point": "60",
    "short_name": "MAXSUBSTR"
  },
  {
    "code_sample": [
      "s = input()",
      "n, k = map(int, input().split())",
      "s = input()",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i + k, n + 1):",
      "        if len(set(s[i:j])) == j - i:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng chuỗi con có tất cả các ký tự khác nhau với độ dài lớn hơn hoặc bằng k",
    "input_sample": [
      "6",
      "abcabc"
    ],
    "output_sample": [
      "3"
    ],
    "point": "60",
    "short_name": "UNIQSUB"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b:",
      "        a, b = b, a % b",
      "    return a",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "result = arr[0]",
      "for num in arr[1:]:",
      "    result = gcd(result, num)",
      "print(result)"
    ],
    "id": "Tìm số lớn nhất chia hết cho tất cả các số trong dãy",
    "input_sample": [
      "6",
      "2 4 6 8 10 12"
    ],
    "output_sample": [
      "12"
    ],
    "point": "50",
    "short_name": "DIVMAX"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "arr = [x + k for x in arr]",
      "result = arr[0]",
      "for num in arr:",
      "    result = (result * num) // math.gcd(result, num)",
      "print(result)"
    ],
    "id": "Tìm số nhỏ nhất chia hết cho tất cả các số trong dãy sau khi tăng mỗi số lên k",
    "input_sample": [
      "5",
      "3 6 9 12 15",
      "2"
    ],
    "output_sample": [
      "30"
    ],
    "point": "70",
    "short_name": "DIVKADJUST"
  },
  {
    "code_sample": [
      "from collections import Counter",
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "counter = Counter(arr)",
      "arr = [num for num in arr if counter[num] != k]",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Xóa các phần tử xuất hiện đúng k lần trong danh sách",
    "input_sample": [
      "6",
      "1 2 2 3 3 3",
      "2"
    ],
    "output_sample": [
      "1 3 3 3"
    ],
    "point": "50",
    "short_name": "REMOVEK"
  },
  {
    "code_sample": [
      "from collections import Counter",
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "counter = Counter(arr)",
      "arr = [num for num in arr if counter[num] <= k]",
      "print(' '.join(map(str, arr)))"
    ],
    "id": "Xóa tất cả các phần tử xuất hiện nhiều hơn k lần",
    "input_sample": [
      "6",
      "1 2 2 3 3 3",
      "2"
    ],
    "output_sample": [
      "1 2 2 3 3"
    ],
    "point": "60",
    "short_name": "REMOVEEXTRA"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "result = []",
      "for i in range(n-1, -1, -1):",
      "    if arr[i] not in result:",
      "        result.append(arr[i])",
      "result.reverse()",
      "print(' '.join(map(str, result)))"
    ],
    "id": "Xóa các phần tử trùng lặp nhưng giữ lại phần tử cuối cùng trong danh sách",
    "input_sample": [
      "6",
      "1 2 3 2 1 4"
    ],
    "output_sample": [
      "3 2 1 4"
    ],
    "point": "60",
    "short_name": "REM_DUPLAST"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "t = input()",
      "index = s.find(t) + 1",
      "if index == 0:",
      "    print(-1)",
      "else:",
      "    print(index)"
    ],
    "id": "Tìm vị trí đầu tiên của chuỗi con trong chuỗi",
    "input_sample": [
      "8",
      "abcdefgh",
      "def"
    ],
    "output_sample": [
      "4"
    ],
    "point": "40",
    "short_name": "FINDPOS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "t = input()",
      "if t in s:",
      "    print('YES')",
      "else:",
      "    print('NO')"
    ],
    "id": "Kiểm tra xem chuỗi con T có phải là chuỗi con của S hay không",
    "input_sample": [
      "8",
      "abcdefgh",
      "abc"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "30",
    "short_name": "CHECKSUB"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "t = input()",
      "s_double = s + s",
      "count = 0",
      "for i in range(n):",
      "    if s_double[i:i + len(t)] == t:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lần xuất hiện của chuỗi con trong chuỗi với phép xoay vòng",
    "input_sample": [
      "6",
      "abcabc",
      "abc"
    ],
    "output_sample": [
      "2"
    ],
    "point": "40",
    "short_name": "CIRCULAR"
  },
  {
    "code_sample": [
      "def is_fibonacci(n):",
      "    a, b = 0, 1",
      "    while b < n:",
      "        a, b = b, a + b",
      "    return b == n",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_fib = -1",
      "for num in arr:",
      "    if is_fibonacci(num) and num > max_fib:",
      "        max_fib = num",
      "print(max_fib)"
    ],
    "id": "Tìm số Fibonacci lớn nhất trong dãy",
    "input_sample": [
      "6",
      "1 4 6 8 13 21"
    ],
    "output_sample": [
      "21"
    ],
    "point": "50",
    "short_name": "FIBMAX"
  },
  {
    "code_sample": [
      "def is_fibonacci(n):",
      "    a, b = 0, 1",
      "    while b < n:",
      "        a, b = b, a + b",
      "    return b == n",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_fib = float('inf')",
      "min_index = -1",
      "for idx, num in enumerate(arr):",
      "    if is_fibonacci(num) and num < min_fib:",
      "        min_fib = num",
      "        min_index = idx + 1",
      "if min_fib == float('inf'):",
      "    print(-1)",
      "else:",
      "    print(min_fib)",
      "    print(min_index)"
    ],
    "id": "Tìm số Fibonacci nhỏ nhất trong dãy và in ra vị trí của nó",
    "input_sample": [
      "6",
      "1 4 6 8 13 21"
    ],
    "output_sample": [
      "1",
      "1"
    ],
    "point": "50",
    "short_name": "FIBMIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "dp = [0] * n",
      "dp[0] = arr[0]",
      "for i in range(1, n):",
      "    dp[i] = max(dp[i-1], arr[i] + (dp[i-2] if i > 1 else 0))",
      "print(dp[-1])"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất với các phần tử không liên tiếp nhau",
    "input_sample": [
      "6",
      "3 -2 5 10 -3 4"
    ],
    "output_sample": [
      "15"
    ],
    "point": "50",
    "short_name": "MAXSUBSUMNON"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for word in words:",
      "    if len(word) % 2 == 0:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có độ dài chẵn trong xâu",
    "input_sample": [
      "hello world test example"
    ],
    "output_sample": [
      "2"
    ],
    "point": "40",
    "short_name": "EVENWORDS"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for word in words:",
      "    if any(c.isdigit() for c in word):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có chứa ít nhất một chữ số",
    "input_sample": [
      "hello 123 world 45 test 678"
    ],
    "output_sample": [
      "3"
    ],
    "point": "50",
    "short_name": "NUMWORDS"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for word in words:",
      "    if word[0].lower() in ['a', 'e', 'i', 'o', 'u']:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ bắt đầu bằng nguyên âm trong xâu",
    "input_sample": [
      "apple orange banana egg animal zebra"
    ],
    "output_sample": [
      "4"
    ],
    "point": "40",
    "short_name": "VOWELWORD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "is_increasing = True",
      "for i in range(1, n):",
      "    if arr[i] <= arr[i-1] or arr[i] % 2 != 0:",
      "        is_increasing = False",
      "        break",
      "print('YES' if is_increasing else 'NO')"
    ],
    "id": "Kiểm tra danh sách có phải là danh sách tăng dần chẵn hay không",
    "input_sample": [
      "5",
      "2 4 6 8 10"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "40",
    "short_name": "EVENORDER"
  },
  {
    "code_sample": [
      "s = input()",
      "even_count = 0",
      "for char in s:",
      "    if char.isdigit() and int(char) % 2 == 0:",
      "        even_count += 1",
      "print(even_count)"
    ],
    "id": "Đếm số lượng chữ số chẵn xuất hiện trong xâu",
    "input_sample": [
      "a1b2c3d4e5f6g7h8i9"
    ],
    "output_sample": [
      "4"
    ],
    "point": "40",
    "short_name": "EVENCOUNT"
  },
  {
    "code_sample": [
      "s = input()",
      "digit_sum = 0",
      "for char in s:",
      "    if char.isdigit():",
      "        digit_sum += int(char)",
      "print(digit_sum)"
    ],
    "id": "Đếm tổng các chữ số xuất hiện trong xâu",
    "input_sample": [
      "a1b2c3d4e5f6g7h8i9"
    ],
    "output_sample": [
      "45"
    ],
    "point": "30",
    "short_name": "SUMDIGITS"
  },
  {
    "code_sample": [
      "s = input()",
      "odd_count = 0",
      "for char in s:",
      "    if char.isdigit() and int(char) % 2 == 1:",
      "        odd_count += 1",
      "print(odd_count)"
    ],
    "id": "Đếm số lượng chữ số lẻ xuất hiện trong xâu",
    "input_sample": [
      "a1b2c3d4e5f6g7h8i9"
    ],
    "output_sample": [
      "5"
    ],
    "point": "30",
    "short_name": "COUNTODD"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "min_sum = sum(arr[:k])",
      "for i in range(1, n - k + 1):",
      "    current_sum = sum(arr[i:i+k])",
      "    if current_sum < min_sum:",
      "        min_sum = current_sum",
      "print(min_sum)"
    ],
    "id": "Tìm tổng nhỏ nhất của dãy con liên tiếp với k phần tử",
    "input_sample": [
      "6 3",
      "2 4 1 3 6 5"
    ],
    "output_sample": [
      "6"
    ],
    "point": "40",
    "short_name": "MINSUMK"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_sum = sum(arr[:k])",
      "for i in range(1, n - k + 1):",
      "    current_sum = sum(arr[i:i+k])",
      "    if current_sum > max_sum:",
      "        max_sum = current_sum",
      "print(max_sum)"
    ],
    "id": "Tìm tổng lớn nhất của dãy con liên tiếp với độ dài tối thiểu k",
    "input_sample": [
      "6 3",
      "2 4 1 3 6 5"
    ],
    "output_sample": [
      "12"
    ],
    "point": "50",
    "short_name": "MAXSUBSUM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "average = sum(arr) / n",
      "count = 0",
      "for num in arr:",
      "    if num > average:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số phần tử lớn hơn giá trị trung bình",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "3"
    ],
    "point": "60",
    "short_name": "COUNTABOVEAVG"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "average = sum(arr) / n",
      "count = 0",
      "for num in arr:",
      "    if num == average:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số phần tử bằng giá trị trung bình",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "1"
    ],
    "point": "60",
    "short_name": "COUNTAVG"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "average = sum(arr) / n",
      "min_above_avg = -1",
      "for num in arr:",
      "    if num > average:",
      "        if min_above_avg == -1 or num < min_above_avg:",
      "            min_above_avg = num",
      "print(min_above_avg)"
    ],
    "id": "Tìm phần tử nhỏ nhất lớn hơn giá trị trung bình",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "4"
    ],
    "point": "60",
    "short_name": "MINABOVEAVG"
  },
  {
    "code_sample": [
      "s = input()",
      "k = int(input())",
      "count = 0",
      "for i in range(len(s)):",
      "    for j in range(i + k, len(s) + 1):",
      "        sub = s[i:j]",
      "        if sub == sub[::-1]:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng chuỗi con là số nhị phân đối xứng có độ dài ít nhất k",
    "input_sample": [
      "3",
      "110101101"
    ],
    "output_sample": [
      "4"
    ],
    "point": "80",
    "short_name": "COUNTPALBIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for i in range(n - 1):",
      "    if arr[i] < arr[i + 1]:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số phần tử nhỏ hơn phần tử kế tiếp",
    "input_sample": [
      "5",
      "1 3 2 5 4"
    ],
    "output_sample": [
      "3"
    ],
    "point": "60",
    "short_name": "COUNTLESS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_element = -1",
      "for i in range(1, n):",
      "    if arr[i] > arr[i - 1]:",
      "        max_element = max(max_element, arr[i])",
      "print(max_element)"
    ],
    "id": "Tìm phần tử lớn nhất mà lớn hơn phần tử kế trước",
    "input_sample": [
      "5",
      "1 3 2 5 4"
    ],
    "output_sample": [
      "5"
    ],
    "point": "60",
    "short_name": "MAXAFTER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for i in range(1, n - 1):",
      "    if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số phần tử lớn hơn cả phần tử trước và sau nó",
    "input_sample": [
      "6",
      "1 3 2 5 4 6"
    ],
    "output_sample": [
      "2"
    ],
    "point": "60",
    "short_name": "COUNTPEAK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_prod = float('inf')",
      "for i in range(n):",
      "    prod = 1",
      "    for j in range(i, n):",
      "        prod *= arr[j]",
      "        min_prod = min(min_prod, prod)",
      "print(min_prod)"
    ],
    "id": "Tìm tích nhỏ nhất của dãy con liên tiếp",
    "input_sample": [
      "6",
      "2 3 1 4 5 6"
    ],
    "output_sample": [
      "1"
    ],
    "point": "60",
    "short_name": "MINPROD"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_prod = float('-inf')",
      "for i in range(n - k + 1):",
      "    prod = 1",
      "    for j in range(i, i + k):",
      "        prod *= arr[j]",
      "    max_prod = max(max_prod, prod)",
      "print(max_prod)"
    ],
    "id": "Tìm dãy con có tích lớn nhất và độ dài tối thiểu k",
    "input_sample": [
      "6 3",
      "2 3 1 4 5 6"
    ],
    "output_sample": [
      "60"
    ],
    "point": "80",
    "short_name": "MAXPROD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_prod = float('-inf')",
      "prod = 1",
      "for i in range(n):",
      "    if arr[i] < 0:",
      "        prod = 1",
      "    else:",
      "        prod *= arr[i]",
      "    max_prod = max(max_prod, prod)",
      "print(max_prod)"
    ],
    "id": "Tìm dãy con liên tiếp có tích lớn nhất mà không có số âm",
    "input_sample": [
      "6",
      "2 3 -1 4 5 -2 6"
    ],
    "output_sample": [
      "120"
    ],
    "point": "70",
    "short_name": "MAXPOSPROD"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for word in words:",
      "    if word[0].isupper():",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ bắt đầu bằng chữ hoa",
    "input_sample": [
      "Hello world, This Is A Test"
    ],
    "output_sample": [
      "4"
    ],
    "point": "50",
    "short_name": "COUNTUPPER"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for word in words:",
      "    if word.isupper():",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ chỉ chứa chữ hoa",
    "input_sample": [
      "HELLO WORLD THIS IS A TEST"
    ],
    "output_sample": [
      "5"
    ],
    "point": "60",
    "short_name": "COUNTUPPER"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "sum = 0",
      "spaces = 0",
      "for word in words:",
      "    if word.isdigit() and int(word) % 5 == 0:",
      "        sum += int(word)",
      "    elif word == ' ':",
      "        spaces += 1",
      "print(sum)",
      "print(spaces)"
    ],
    "id": "Tính tổng các số chia hết cho 5 và số khoảng trắng",
    "input_sample": [
      "5 10 15 20 25 30 35 40",
      "a b c  d e f g h "
    ],
    "output_sample": [
      "150",
      "6"
    ],
    "point": "150",
    "short_name": "TONGSO5"
  },
  {
    "code_sample": [
      "import math",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "for num in arr:",
      "    if not is_prime(num):",
      "        print('NO')",
      "        break",
      "else:",
      "    print('YES')"
    ],
    "id": "Kiểm tra dãy số có phải là dãy số nguyên tố hay không",
    "input_sample": [
      "5",
      "2 3 5 7 11"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "150",
    "short_name": "KIEMTRA"
  },
  {
    "code_sample": [
      "import math",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_len = 0",
      "count = 0",
      "for num in arr:",
      "    if is_prime(num):",
      "        count += 1",
      "    else:",
      "        max_len = max(max_len, count)",
      "        count = 0",
      "max_len = max(max_len, count)",
      "print(max_len)"
    ],
    "id": "Đếm số lượng số nguyên tố trong dãy con liên tiếp có độ dài lớn nhất",
    "input_sample": [
      "6",
      "2 3 5 7 11 4"
    ],
    "output_sample": [
      "4"
    ],
    "point": "160",
    "short_name": "DEMNGTO"
  },
  {
    "code_sample": [
      "s = input()",
      "even_sum = 0",
      "special_char_count = 0",
      "for char in s:",
      "    if char.isdigit() and int(char) % 2 == 0:",
      "        even_sum += int(char)",
      "    elif not char.isalnum():",
      "        special_char_count += 1",
      "print(even_sum)",
      "print(special_char_count)"
    ],
    "id": "Tính tổng các chữ số chẵn và số lượng ký tự đặc biệt Input:",
    "input_sample": [
      "abc123!@#456*()"
    ],
    "output_sample": [
      "12",
      "6"
    ],
    "point": "160",
    "short_name": "TONGCHU"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = input().split()",
      "arr.sort(key=lambda x: x*10)",
      "print(''.join(arr))"
    ],
    "id": "Số nhỏ nhất có thể tạo được",
    "input_sample": [
      "4",
      "3 30 34 5"
    ],
    "output_sample": [
      "303345"
    ],
    "point": "120",
    "short_name": "MINNUM"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "primes = [x for x in arr if is_prime(x)]",
      "non_primes = [x for x in arr if not is_prime(x)]",
      "primes.sort(reverse=True)",
      "non_primes.sort(reverse=True)",
      "print(' '.join(map(str, primes + non_primes)))"
    ],
    "id": "Sắp xếp số giảm dần nhưng số nguyên tố phải ở đầu",
    "input_sample": [
      "7",
      "5 2 8 9 4 7 6"
    ],
    "output_sample": [
      "7 5 2 9 8 6 4"
    ],
    "point": "170",
    "short_name": "SORTPRIME"
  },
  {
    "code_sample": [
      "s = input()",
      "letters = set()",
      "for c in s:",
      "    if 'a' <= c <= 'z':",
      "        letters.add(c)",
      "if len(letters) == 26:",
      "    print('YES')",
      "else:",
      "    print('NO')"
    ],
    "id": "Kiểm tra xem xâu có chứa tất cả các chữ cái từ 'a' đến 'z'",
    "input_sample": [
      "thequickbrownfoxjumpsoverthelazydog"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "160",
    "short_name": "CONTAINA2Z"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "freq = {}",
      "for x in arr:",
      "    x *= 2",
      "    if x in freq:",
      "        freq[x] += 1",
      "    else:",
      "        freq[x] = 1",
      "max_count = 0",
      "res = 0",
      "for num in freq:",
      "    if freq[num] > max_count or (freq[num] == max_count and num > res):",
      "        max_count = freq[num]",
      "        res = num",
      "print(res)"
    ],
    "id": "Tìm số xuất hiện nhiều nhất trong dãy số sau khi nhân đôi các số",
    "input_sample": [
      "7",
      "1 2 2 3 3 3 4"
    ],
    "output_sample": [
      "6"
    ],
    "point": "200",
    "short_name": "MAXDOUBLED"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "max_len = 0",
      "res = ''",
      "for i in range(n):",
      "    for j in range(i, n):",
      "        sub = s[i:j+1]",
      "        if sub == sub[::-1]:",
      "            if len(sub) > max_len:",
      "                max_len = len(sub)",
      "                res = sub",
      "print(res)"
    ],
    "id": "Tìm chuỗi con đối xứng dài nhất",
    "input_sample": [
      "11",
      "abcbabcbabc"
    ],
    "output_sample": [
      "abcbabcba"
    ],
    "point": "210",
    "short_name": "MAXPALIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "min_len = n",
      "for i in range(n):",
      "    used = set()",
      "    for j in range(i, n):",
      "        if s[j] in used:",
      "            break",
      "        used.add(s[j])",
      "        if len(used) == len(set(s)):",
      "            min_len = min(min_len, j - i + 1)",
      "            break",
      "print(min_len)"
    ],
    "id": "Tìm chuỗi con có độ dài nhỏ nhất với tất cả các ký tự khác nhau trong S",
    "input_sample": [
      "10",
      "abcabcabcd"
    ],
    "output_sample": [
      "4"
    ],
    "point": "200",
    "short_name": "MINUNIQUE"
  },
  {
    "code_sample": [
      "from collections import defaultdict",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "cnt = defaultdict(int)",
      "for i in range(n):",
      "    for j in range(i, n):",
      "        if arr[j] % arr[i] == 0:",
      "            cnt[arr[i]] += 1",
      "res = -1",
      "for x in cnt:",
      "    if cnt[x] >= (n + 1) // 2:",
      "        if res == -1 or x < res:",
      "            res = x",
      "print(res)"
    ],
    "id": "Tìm số nhỏ nhất chia hết cho ít nhất một nửa số trong dãy",
    "input_sample": [
      "6",
      "2 4 6 8 10 12"
    ],
    "output_sample": [
      "2"
    ],
    "point": "220",
    "short_name": "MINHALFDIV"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "prefix = [0] * (n + 1)",
      "for i in range(n):",
      "    prefix[i + 1] = prefix[i] + arr[i]",
      "max_sum = -10**18",
      "for i in range(k, n + 1):",
      "    for j in range(i - k + 1):",
      "        s = prefix[i] - prefix[j]",
      "        if s > max_sum:",
      "            max_sum = s",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất và độ dài tối thiểu k",
    "input_sample": [
      "8 3",
      "1 -2 3 4 -1 2 1 -5"
    ],
    "output_sample": [
      "9"
    ],
    "point": "240",
    "short_name": "MAXSUBSUMK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_sum = 10**18",
      "i = 0",
      "while i < n:",
      "    if arr[i] >= 0:",
      "        j = i",
      "        s = 0",
      "        while j < n and arr[j] >= 0:",
      "            s += arr[j]",
      "            j += 1",
      "        if s < min_sum:",
      "            min_sum = s",
      "        i = j",
      "    else:",
      "        i += 1",
      "print(min_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất với các phần tử liên tiếp nhau không âm Input:",
    "input_sample": [
      "8",
      "2 -1 3 0 4 -2 1 2"
    ],
    "output_sample": [
      "0"
    ],
    "point": "240",
    "short_name": "MINPOSSUB"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "is_decreasing = True",
      "for i in range(1, n):",
      "    if arr[i] > arr[i - 1]:",
      "        is_decreasing = False",
      "        break",
      "if is_decreasing:",
      "    print(\"YES\")",
      "else:",
      "    print(\"NO\")"
    ],
    "id": "Kiểm tra danh sách giảm dần Input:",
    "input_sample": [
      "5",
      "9 7 7 5 2"
    ],
    "output_sample": [
      "NO"
    ],
    "point": "140",
    "short_name": "ISDESC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "seen = set()",
      "has_duplicate = False",
      "for num in arr:",
      "    if num in seen:",
      "        has_duplicate = True",
      "        break",
      "    seen.add(num)",
      "if has_duplicate:",
      "    print(\"YES\")",
      "else:",
      "    print(\"NO\")"
    ],
    "id": "Kiểm tra danh sách có chứa phần tử trùng lặp hay không",
    "input_sample": [
      "6",
      "1 2 3 4 5 2"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "130",
    "short_name": "HASDUPLIC"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "res = ''",
      "for i in range(n):",
      "    l = i",
      "    r = i",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        if (r - l + 1) % 2 == 1 and (r - l + 1 > len(res)):",
      "            res = s[l:r+1]",
      "        l -= 1",
      "        r += 1",
      "print(res)"
    ],
    "id": "Tìm chuỗi con là số nhị phân đối xứng có độ dài lẻ lớn nhất Input:",
    "input_sample": [
      "1010110101011"
    ],
    "output_sample": [
      "1010110101011"
    ],
    "point": "180",
    "short_name": "MAXODDPAL"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "res = ''",
      "for i in range(n):",
      "    for j in range(i, n):",
      "        t = s[i:j+1]",
      "        if t == t[::-1] and t.count('0') == t.count('1'):",
      "            if len(t) > len(res):",
      "                res = t",
      "print(res)"
    ],
    "id": "Tìm chuỗi con là số nhị phân đối xứng dài nhất có số '0' và '1' bằng nhau",
    "input_sample": [
      "10110011"
    ],
    "output_sample": [
      "0110"
    ],
    "point": "180",
    "short_name": "PALBIN01EQ"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_upper = -1",
      "result = ''",
      "for word in words:",
      "    count = 0",
      "    for c in word:",
      "        if c.isupper():",
      "            count += 1",
      "    if count > max_upper:",
      "        max_upper = count",
      "        result = word",
      "print(result)"
    ],
    "id": "Tìm từ chứa nhiều chữ hoa nhất trong xâu",
    "input_sample": [
      "Xin Chao THE GIOI"
    ],
    "output_sample": [
      "THE"
    ],
    "point": "160",
    "short_name": "MAXUPPER"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "result = ''",
      "for l in range(n, 0, -1):",
      "    seen = set()",
      "    found = False",
      "    for i in range(n - l + 1):",
      "        sub = s[i:i+l]",
      "        if sub in seen:",
      "            result = sub",
      "            found = True",
      "            break",
      "        seen.add(sub)",
      "    if found:",
      "        break",
      "print(result)"
    ],
    "id": "Tìm chuỗi con lặp lại dài nhất xuất hiện ít nhất hai lần",
    "input_sample": [
      "abcababc"
    ],
    "output_sample": [
      "abc"
    ],
    "point": "220",
    "short_name": "MAXREPEAT"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "start = 0",
      "max_len = 0",
      "res = ''",
      "used = {}",
      "for i in range(n):",
      "    if s[i] in used and used[s[i]] >= start:",
      "        start = used[s[i]] + 1",
      "    used[s[i]] = i",
      "    if i - start + 1 > max_len:",
      "        max_len = i - start + 1",
      "        res = s[start:i+1]",
      "print(res)"
    ],
    "id": "Tìm chuỗi con lặp lại có độ dài lớn nhất mà không có ký tự nào lặp lại trong nó",
    "input_sample": [
      "abcabcbb"
    ],
    "output_sample": [
      "abc"
    ],
    "point": "210",
    "short_name": "MAXNODUP"
  },
  {
    "code_sample": [
      "s = input()",
      "res = ''",
      "tmp = ''",
      "for c in s:",
      "    if c.isdigit():",
      "        tmp += c",
      "        if len(tmp) > len(res):",
      "            res = tmp",
      "    else:",
      "        tmp = ''",
      "print(res)"
    ],
    "id": "Tìm chuỗi con lặp lại có độ dài lớn nhất và tất cả các ký tự trong đó đều là chữ số",
    "input_sample": [
      "abc12345xyz7890"
    ],
    "output_sample": [
      "12345"
    ],
    "point": "150",
    "short_name": "MAXDIGITS"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "res = -1",
      "for x in a:",
      "    if x % k == 0:",
      "        if res == -1 or x < res:",
      "            res = x",
      "print(res)"
    ],
    "id": "Tìm số nhỏ nhất chia hết cho k trong danh sách",
    "input_sample": [
      "6 3",
      "2 4 6 9 12 15"
    ],
    "output_sample": [
      "6"
    ],
    "point": "110",
    "short_name": "MIN_DIV_K"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "count = 0",
      "for x in a:",
      "    if x % k == 0:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng số chia hết cho k trong danh sách",
    "input_sample": [
      "7 5",
      "5 10 12 13 15 17 20"
    ],
    "output_sample": [
      "4"
    ],
    "point": "100",
    "short_name": "CNTDIVK"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "ans = -1",
      "for x in a:",
      "    if x % k == 0 and is_prime(x):",
      "        if x > ans:",
      "            ans = x",
      "print(ans)"
    ],
    "id": "Tìm số lớn nhất chia hết cho k và là số nguyên tố trong danh sách",
    "input_sample": [
      "7 5",
      "5 10 12 13 15 17 20"
    ],
    "output_sample": [
      "5"
    ],
    "point": "130",
    "short_name": "MAXKPRIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "max_val = max(a)",
      "fib = [0, 1]",
      "while fib[-1] < max_val:",
      "    fib.append(fib[-1] + fib[-2])",
      "fib_set = set(fib)",
      "count_map = {}",
      "for num in a:",
      "    if num in fib_set:",
      "        count_map[num] = count_map.get(num, 0) + 1",
      "res = 0",
      "for v in count_map.values():",
      "    if v > 1:",
      "        res += 1",
      "print(res)"
    ],
    "id": "Đếm số Fibonacci trong dãy với số lượng xuất hiện nhiều hơn một lần",
    "input_sample": [
      "8",
      "1 1 2 3 5 8 8 10"
    ],
    "output_sample": [
      "3"
    ],
    "point": "220",
    "short_name": "FIBCOUNT"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "max_sum = -1",
      "for i in range(n - k + 1):",
      "    sub = a[i:i + k]",
      "    has_prime = False",
      "    for num in sub:",
      "        if is_prime(num):",
      "            has_prime = True",
      "            break",
      "    if not has_prime:",
      "        s = sum(sub)",
      "        if s > max_sum:",
      "            max_sum = s",
      "print(max_sum)"
    ],
    "id": "Tìm tổng lớn nhất của dãy con liên tiếp có k phần tử và không có số nguyên tố",
    "input_sample": [
      "8 3",
      "4 6 8 5 9 10 12 14"
    ],
    "output_sample": [
      "36"
    ],
    "point": "170",
    "short_name": "MAXNOPRIME"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "res = float('inf')",
      "cnt = 0",
      "s = 0",
      "l = 0",
      "for r in range(n):",
      "    s += a[r]",
      "    if a[r] % 2 == 1:",
      "        cnt += 1",
      "    while cnt > k:",
      "        if a[l] % 2 == 1:",
      "            cnt -= 1",
      "        s -= a[l]",
      "        l += 1",
      "    if cnt == k:",
      "        res = min(res, s)",
      "print(res if res != float('inf') else -1)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất với k phần tử lẻ",
    "input_sample": [
      "6 2",
      "1 3 2 5 4 1"
    ],
    "output_sample": [
      "6"
    ],
    "point": "210",
    "short_name": "MINODDSUM"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "max_sum = -1",
      "for i in range(n):",
      "    cnt = 0",
      "    s = 0",
      "    for j in range(i, n):",
      "        if a[j] % 2 == 0:",
      "            cnt += 1",
      "        s += a[j]",
      "        if cnt == k:",
      "            if s > max_sum:",
      "                max_sum = s",
      "            break",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất với k phần tử chẵn",
    "input_sample": [
      "7 2",
      "1 2 4 3 6 8 5"
    ],
    "output_sample": [
      "14"
    ],
    "point": "230",
    "short_name": "MAXEVENSUM"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "max_sum = -1",
      "for i in range(n):",
      "    cnt = 0",
      "    s = 0",
      "    for j in range(i, n):",
      "        if a[j] % 3 != 0:",
      "            cnt += 1",
      "        s += a[j]",
      "        if cnt == k:",
      "            if s > max_sum:",
      "                max_sum = s",
      "            break",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất với k phần tử không chia hết cho 3",
    "input_sample": [
      "7 2",
      "1 3 4 5 6 7 8"
    ],
    "output_sample": [
      "13"
    ],
    "point": "230",
    "short_name": "MAXNOT3"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_len = 0",
      "count = 0",
      "for w in words:",
      "    if len(w) > max_len:",
      "        max_len = len(w)",
      "        count = 1",
      "    elif len(w) == max_len:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có độ dài lớn nhất trong xâu",
    "input_sample": [
      "this is a sample sentence with longest words"
    ],
    "output_sample": [
      "2"
    ],
    "point": "110",
    "short_name": "MAXWORDCNT"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "min_len = len(words[0])",
      "min_word = words[0]",
      "for w in words:",
      "    if len(w) < min_len:",
      "        min_len = len(w)",
      "        min_word = w",
      "print(min_word)"
    ],
    "id": "Tìm từ có độ dài nhỏ nhất và in ra",
    "input_sample": [
      "this is a simple test case"
    ],
    "output_sample": [
      "a"
    ],
    "point": "100",
    "short_name": "MINWORD"
  },
  {
    "code_sample": [
      "s = input()",
      "count_map = {}",
      "for c in s:",
      "    count_map[c] = count_map.get(c, 0) + 1",
      "res = ''",
      "for c in s:",
      "    if count_map[c] == 2:",
      "        res += c",
      "print(res)"
    ],
    "id": "Tạo chuỗi từ các ký tự lặp lại đúng 2 lần trong S",
    "input_sample": [
      "aabbccddeeffg"
    ],
    "output_sample": [
      "aabbccddeeff"
    ],
    "point": "150",
    "short_name": "TWICECHAR"
  },
  {
    "code_sample": [
      "s = input()",
      "count_map = {}",
      "for c in s:",
      "    count_map[c] = count_map.get(c, 0) + 1",
      "res = ''",
      "for c in reversed(s):",
      "    if count_map[c] == 1:",
      "        res += c",
      "print(res)"
    ],
    "id": "Tạo chuỗi từ các ký tự không lặp lại trong S với thứ tự ngược lại",
    "input_sample": [
      "abracadabra"
    ],
    "output_sample": [
      "cdbr"
    ],
    "point": "130",
    "short_name": "UNIQREV"
  },
  {
    "code_sample": [
      "s = input()",
      "count_map = {}",
      "for c in s:",
      "    count_map[c] = count_map.get(c, 0) + 1",
      "res = ''",
      "for c in s:",
      "    if count_map[c] >= 2:",
      "        res += c",
      "print(res)"
    ],
    "id": "Tạo chuỗi từ các ký tự xuất hiện ít nhất 2 lần trong S",
    "input_sample": [
      "abbccdde"
    ],
    "output_sample": [
      "bbccdd"
    ],
    "point": "150",
    "short_name": "MIN2CHAR"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count_map = {}",
      "for x in arr:",
      "    count_map[x] = count_map.get(x, 0) + 1",
      "max_freq = 0",
      "max_num = None",
      "for k, v in count_map.items():",
      "    if v > max_freq:",
      "        max_freq = v",
      "        max_num = k",
      "print(max_num)",
      "print(max_freq)"
    ],
    "id": "Tìm phần tử xuất hiện nhiều nhất trong danh sách",
    "input_sample": [
      "8",
      "1 2 2 3 3 3 4 4"
    ],
    "output_sample": [
      "3",
      "3"
    ],
    "point": "110",
    "short_name": "MAXFREQ"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count_map = {}",
      "for x in arr:",
      "    count_map[x] = count_map.get(x, 0) + 1",
      "min_freq = 10**9",
      "min_num = None",
      "for k, v in count_map.items():",
      "    if v < min_freq:",
      "        min_freq = v",
      "        min_num = k",
      "print(min_num)",
      "print(min_freq)"
    ],
    "id": "Tìm phần tử xuất hiện ít nhất trong danh sách",
    "input_sample": [
      "8",
      "1 2 2 3 3 3 4 4"
    ],
    "output_sample": [
      "1",
      "1"
    ],
    "point": "110",
    "short_name": "MINFREQ"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "count_map = {}",
      "for x in arr:",
      "    count_map[x] = count_map.get(x, 0) + 1",
      "result = 0",
      "for v in count_map.values():",
      "    if v == k:",
      "        result += 1",
      "print(result)"
    ],
    "id": "Đếm số lượng phần tử xuất hiện đúng k lần trong danh sách",
    "input_sample": [
      "8 2",
      "1 2 2 3 3 3 4 4"
    ],
    "output_sample": [
      "3"
    ],
    "point": "110",
    "short_name": "COUNTK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_sum = arr[0]",
      "curr_sum = 0",
      "for x in arr:",
      "    curr_sum += x",
      "    if curr_sum < min_sum:",
      "        min_sum = curr_sum",
      "    if curr_sum > 0:",
      "        curr_sum = 0",
      "print(min_sum)"
    ],
    "id": "Tìm tổng tích lũy nhỏ nhất của một đoạn con liên tiếp",
    "input_sample": [
      "5",
      "3 1 4 1 5"
    ],
    "output_sample": [
      "1"
    ],
    "point": "100",
    "short_name": "MINACCUM"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "prefix = [0] * (n + 1)",
      "for i in range(1, n + 1):",
      "    prefix[i] = prefix[i-1] + arr[i-1]",
      "max_sum = -10**15",
      "for i in range(k, n + 1):",
      "    for j in range(i - k + 1):",
      "        curr = prefix[i] - prefix[j]",
      "        if curr > max_sum:",
      "            max_sum = curr",
      "print(max_sum)"
    ],
    "id": "Tìm tổng tích lũy lớn nhất của một đoạn con liên tiếp với độ dài lớn hơn hoặc bằng k",
    "input_sample": [
      "5 3",
      "1 2 3 4 5"
    ],
    "output_sample": [
      "12"
    ],
    "point": "140",
    "short_name": "MAXACCUMK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "current_sum = 0",
      "for num in arr:",
      "    if num % 2 == 1:",
      "        current_sum += num",
      "        if current_sum > max_sum:",
      "            max_sum = current_sum",
      "    else:",
      "        current_sum = 0",
      "print(max_sum)"
    ],
    "id": "Tìm tổng tích lũy lớn nhất của một đoạn con liên tiếp mà không chứa số chẵn",
    "input_sample": [
      "8",
      "1 3 5 2 7 9 11 4"
    ],
    "output_sample": [
      "27"
    ],
    "point": "140",
    "short_name": "MAXSUMNOEV"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "vowels = set('aeiou')",
      "count = 0",
      "for w in words:",
      "    lower_w = w.lower()",
      "    if vowels.issubset(set(lower_w)):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số từ chứa tất cả các nguyên âm",
    "input_sample": [
      "This is an education example"
    ],
    "output_sample": [
      "1"
    ],
    "point": "130",
    "short_name": "COUNTVOWEL"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "vowels = set('aeiouAEIOU')",
      "max_count = -1",
      "result = ''",
      "for w in words:",
      "    count = 0",
      "    for ch in w:",
      "        if ch in vowels:",
      "            count += 1",
      "    if count > max_count:",
      "        max_count = count",
      "        result = w",
      "print(result)"
    ],
    "id": "Tìm từ có số lượng nguyên âm nhiều nhất",
    "input_sample": [
      "Education is important"
    ],
    "output_sample": [
      "Education"
    ],
    "point": "130",
    "short_name": "MAXVOWEL"
  },
  {
    "code_sample": [
      "vowels = {'a', 'e', 'i', 'o', 'u'}",
      "s = input().strip()",
      "words = s.split()",
      "max_word = ''",
      "max_length = 0",
      "for word in words:",
      "    has_vowel = False",
      "    for char in word:",
      "        if char.lower() in vowels:",
      "            has_vowel = True",
      "            break",
      "    if not has_vowel and len(word) > max_length:",
      "        max_word = word",
      "        max_length = len(word)",
      "print(max_word)"
    ],
    "id": "Tìm từ dài nhất không chứa nguyên âm",
    "input_sample": [
      "hello world python programming"
    ],
    "output_sample": [
      "python"
    ],
    "point": "90",
    "short_name": "LONGNOVOW"
  },
  {
    "code_sample": [
      "s = input().strip()",
      "max_sub = current_sub = s[0] if s else ''",
      "for i in range(1, len(s)):",
      "    if s[i] <= s[i-1]:",
      "        current_sub += s[i]",
      "        if len(current_sub) > len(max_sub):",
      "            max_sub = current_sub",
      "    else:",
      "        current_sub = s[i]",
      "print(max_sub)"
    ],
    "id": "Tìm chuỗi con dài nhất có các ký tự theo thứ tự giảm dần Input:",
    "input_sample": [
      "abcdeabcdabcaba"
    ],
    "output_sample": [
      "edcba"
    ],
    "point": "80",
    "short_name": "LONGDESC"
  },
  {
    "code_sample": [
      "s = input().strip()",
      "char_set = set()",
      "left = 0",
      "max_len = 0",
      "result = ''",
      "for right in range(len(s)):",
      "    while s[right] in char_set:",
      "        char_set.remove(s[left])",
      "        left += 1",
      "    char_set.add(s[right])",
      "    if right - left + 1 > max_len:",
      "        max_len = right - left + 1",
      "        result = s[left:right+1]",
      "print(result)"
    ],
    "id": "Tìm chuỗi con dài nhất có các ký tự không trùng lặp",
    "input_sample": [
      "abcabcbb"
    ],
    "output_sample": [
      "abc"
    ],
    "point": "110",
    "short_name": "LONGUNIQUE"
  },
  {
    "code_sample": [
      "n, x = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_val = -1",
      "for num in arr:",
      "    if num < x and num > max_val:",
      "        max_val = num",
      "print(max_val)"
    ],
    "id": "Tìm phần tử lớn nhất nhỏ hơn x",
    "input_sample": [
      "5 8",
      "3 7 9 5 2"
    ],
    "output_sample": [
      "7"
    ],
    "point": 70,
    "short_name": "MAXLTX"
  },
  {
    "code_sample": [
      "n, a, b = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    if a <= num <= b:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số phần tử trong danh sách nằm trong khoảng [a, b]",
    "input_sample": [
      "5 3 8",
      "2 5 7 9 3"
    ],
    "output_sample": [
      "3"
    ],
    "point": 60,
    "short_name": "COUNTAB"
  },
  {
    "code_sample": [
      "S = int(input())",
      "result = ''",
      "if S == 0:",
      "    print(0)",
      "else:",
      "    while S > 0:",
      "        if S >= 9:",
      "            result += '9'",
      "            S -= 9",
      "        else:",
      "            result += str(S)",
      "            S = 0",
      "    print(result)"
    ],
    "id": "Tìm số lớn nhất có tổng các chữ số bằng S",
    "input_sample": [
      "20"
    ],
    "output_sample": [
      "992"
    ],
    "point": 50,
    "short_name": "MAX_SUM_S"
  },
  {
    "code_sample": [
      "S = int(input())",
      "if S == 0:",
      "    print(0)",
      "else:",
      "    count_9 = S // 9",
      "    remainder = S % 9",
      "    if remainder != 0:",
      "        result = str(remainder) + '9' * count_9",
      "    else:",
      "        result = '9' * count_9",
      "    print(result)"
    ],
    "id": "Tìm số có ít chữ số nhất với tổng các chữ số bằng S",
    "input_sample": [
      "20"
    ],
    "output_sample": [
      "299"
    ],
    "point": 50,
    "short_name": "MIN_DIGIT_S"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def sum_digits(n):",
      "    return sum(int(d) for d in str(n))",
      "",
      "S = int(input())",
      "num = 2",
      "while True:",
      "    if is_prime(num) and sum_digits(num) == S:",
      "        print(num)",
      "        break",
      "    num += 1"
    ],
    "id": "Tìm số có tổng các chữ số bằng S và là số nguyên tố nhỏ nhất",
    "input_sample": [
      "10"
    ],
    "output_sample": [
      "19"
    ],
    "point": 120,
    "short_name": "MINPRIME_S"
  },
  {
    "code_sample": [
      "n = int(input())",
      "if n % 2 == 0:",
      "    print(0)",
      "else:",
      "    k = (n + 1) // 2",
      "    print(2 ** k)"
    ],
    "id": "Đếm số lượng xâu nhị phân đối xứng có độ dài lẻ",
    "input_sample": [
      "3"
    ],
    "output_sample": [
      "4"
    ],
    "point": 50,
    "short_name": "BIN_PAL"
  },
  {
    "code_sample": [
      "vowels = {'a', 'e', 'i', 'o', 'u'}",
      "S = input().strip()",
      "max_seq = ''",
      "current_seq = ''",
      "prev_char = ''",
      "",
      "for char in S:",
      "    if char in vowels:",
      "        if not current_seq or char >= prev_char:",
      "            current_seq += char",
      "            prev_char = char",
      "            if len(current_seq) > len(max_seq):",
      "                max_seq = current_seq",
      "        else:",
      "            current_seq = char",
      "            prev_char = char",
      "    else:",
      "        current_seq = ''",
      "        prev_char = ''",
      "",
      "print(max_seq)"
    ],
    "id": "Tìm chuỗi con dài nhất có các ký tự theo thứ tự tăng dần mà chỉ chứa các nguyên âm",
    "input_sample": [
      "aabeebioouu"
    ],
    "output_sample": [
      "aeeiou"
    ],
    "point": 170,
    "short_name": "VOWELSEQ"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "min_val = float('inf')",
      "",
      "for num in arr:",
      "    if num % k != 0 and num < min_val:",
      "        min_val = num",
      "",
      "print(min_val if min_val != float('inf') else -1)"
    ],
    "id": "Tìm phần tử nhỏ nhất trong danh sách không chia hết cho k",
    "input_sample": [
      "5 3",
      "2 6 7 9 1"
    ],
    "output_sample": [
      "1"
    ],
    "point": 120,
    "short_name": "MIN_NOT_K"
  },
  {
    "code_sample": [
      "n = int(input())",
      "if n % 2 != 0:",
      "    print(0)",
      "else:",
      "    print(2 ** (n // 2))"
    ],
    "id": "Đếm số lượng xâu nhị phân đối xứng có độ dài chẵn",
    "input_sample": [
      "4"
    ],
    "output_sample": [
      "4"
    ],
    "point": 60,
    "short_name": "BIN_PALIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "half = (n + 1) // 2",
      "result = '1' * half + '0' * (n - half)",
      "result = result[:half] + result[:n-half][::-1]",
      "print(result)"
    ],
    "id": "Tìm xâu nhị phân đối xứng lớn nhất có độ dài n",
    "input_sample": [
      "5"
    ],
    "output_sample": [
      "11011"
    ],
    "point": 40,
    "short_name": "MAX_BINPAL"
  },
  {
    "code_sample": [
      "from collections import deque",
      "",
      "m, n, k = map(int, input().split())",
      "grid = [list(map(int, input().split())) for _ in range(m)]",
      "",
      "vis = [[[False]*(k+1) for _ in range(n)] for _ in range(m)]",
      "dq = deque()",
      "dq.append((0, 0, 0, 0))",
      "vis[0][0][0] = True",
      "",
      "res = -1",
      "while dq:",
      "    x, y, step, block = dq.popleft()",
      "    if x == m-1 and y == n-1:",
      "        res = step",
      "        break",
      "    for dx, dy in [(0,1),(1,0),(-1,0),(0,-1)]:",
      "        nx, ny = x+dx, y+dy",
      "        if 0<=nx<m and 0<=ny<n:",
      "            nb = block + (1 if grid[nx][ny]==0 else 0)",
      "            if nb <= k and not vis[nx][ny][nb]:",
      "                vis[nx][ny][nb] = True",
      "                dq.append((nx, ny, step+1, nb))",
      "",
      "print(res)"
    ],
    "id": "Tìm số con đường ngắn nhất từ góc trên trái đến góc dưới phải với k chướng ngại vật bị xóa",
    "input_sample": [
      "3 3 1",
      "0 0 0",
      "1 1 0",
      "0 1 1"
    ],
    "output_sample": [
      "4"
    ],
    "point": "300",
    "short_name": "PATHKDEL"
  },
  {
    "code_sample": [
      "from collections import deque",
      "",
      "m, n = map(int, input().split())",
      "grid = [list(map(int, input().split())) for _ in range(m)]",
      "",
      "vis = [[False]*n for _ in range(m)]",
      "dq = deque()",
      "if grid[0][0] == 1:",
      "    dq.append((0, 0, 0))",
      "    vis[0][0] = True",
      "res = -1",
      "while dq:",
      "    x, y, step = dq.popleft()",
      "    if x == m-1 and y == n-1:",
      "        res = step",
      "        break",
      "    for dx, dy in [(1,1), (-1,-1), (-1,1), (1,-1)]:",
      "        nx, ny = x + dx, y + dy",
      "        if 0 <= nx < m and 0 <= ny < n and not vis[nx][ny] and grid[nx][ny] == 1:",
      "            vis[nx][ny] = True",
      "            dq.append((nx, ny, step+1))",
      "",
      "print(res)"
    ],
    "id": "Tìm số con đường ngắn nhất từ góc trên trái đến góc dưới phải mà chỉ được di chuyển theo đường chéo",
    "input_sample": [
      "3 3",
      "1 1 1",
      "1 1 1",
      "1 1 1"
    ],
    "output_sample": [
      "2"
    ],
    "point": "270",
    "short_name": "DIAGPATH"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "primes = []",
      "for i in range(n):",
      "    if is_prime(arr[i]) and arr[i] not in [x[0] for x in primes]:",
      "        primes.append((arr[i], i + 1))",
      "",
      "primes.sort(reverse=True)",
      "",
      "if len(primes) < 2:",
      "    print(-1)",
      "else:",
      "    total = primes[0][0] + primes[1][0]",
      "    print(total)",
      "    print(primes[0][1], primes[1][1])"
    ],
    "id": "Tìm số nguyên tố không trùng nhau",
    "input_sample": [
      "8",
      "2 3 5 3 7 4 11 2"
    ],
    "output_sample": [
      "18",
      "7 5"
    ],
    "point": "270",
    "short_name": "UNIQPRIMES"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def sum_square_digits(n):",
      "    total = 0",
      "    for digit in str(n):",
      "        total += int(digit) ** 2",
      "    return total",
      "",
      "n = int(input())",
      "res = -1",
      "for i in range(n, 1, -1):",
      "    if is_prime(i):",
      "        if is_prime(sum_square_digits(i)):",
      "            res = i",
      "            break",
      "print(res)"
    ],
    "id": "Tìm số nguyên tố đặc biệt",
    "input_sample": [
      "30"
    ],
    "output_sample": [
      "23"
    ],
    "point": "250",
    "short_name": "SPEC_PRIME"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "a, b = 0, 1",
      "max_prime = -1",
      "while a <= n:",
      "    if is_prime(a):",
      "        max_prime = max(max_prime, a)",
      "    a, b = b, a + b",
      "print(max_prime)"
    ],
    "id": "Tìm số nguyên tố Fibonacci",
    "input_sample": [
      "20"
    ],
    "output_sample": [
      "13"
    ],
    "point": "230",
    "short_name": "FIBOPRIME"
  },
  {
    "code_sample": [
      "s = input()",
      "digits = []",
      "for ch in s:",
      "    if ch.isdigit():",
      "        digits.append(ch)",
      "digits.reverse()",
      "res = ''",
      "idx = 0",
      "for ch in s:",
      "    if ch.isdigit():",
      "        res += digits[idx]",
      "        idx += 1",
      "    else:",
      "        res += ch",
      "print(res)"
    ],
    "id": "Đảo ngược các số trong chuỗi",
    "input_sample": [
      "a1b2c3d4"
    ],
    "output_sample": [
      "a4b3c2d1"
    ],
    "point": "170",
    "short_name": "REVDIGITS"
  },
  {
    "code_sample": [
      "s = input()",
      "res = ''",
      "num = ''",
      "for ch in s:",
      "    if ch.isdigit():",
      "        num += ch",
      "    else:",
      "        if num != '':",
      "            res += '{:,}'.format(int(num))",
      "            num = ''",
      "        res += ch",
      "if num != '':",
      "    res += '{:,}'.format(int(num))",
      "print(res)"
    ],
    "id": "Thêm dấu phẩy vào các số",
    "input_sample": [
      "abc1234def56789gh"
    ],
    "output_sample": [
      "abc1,234def56,789gh"
    ],
    "point": "200",
    "short_name": "COMMANUMS"
  },
  {
    "code_sample": [
      "s = input().split()",
      "words = []",
      "nums = []",
      "for x in s:",
      "    if x.isdigit():",
      "        nums.append(int(x))",
      "    else:",
      "        words.append(x)",
      "words.sort()",
      "nums.sort()",
      "res = words + list(map(str, nums))",
      "print(' '.join(res))"
    ],
    "id": "Tách các từ và số, sắp xếp riêng biệt",
    "input_sample": [
      "apple 42 banana 7 cat 19"
    ],
    "output_sample": [
      "apple banana cat 7 19 42"
    ],
    "point": "210",
    "short_name": "SORTMIXED"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        if is_prime(arr[i] + arr[j]):",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm cặp số có tổng nguyên tố",
    "input_sample": [
      "5",
      "1 2 3 4 5"
    ],
    "output_sample": [
      "4"
    ],
    "point": "250",
    "short_name": "SUMPAIRPR"
  },
  {
    "code_sample": [
      "def generate_fibo(limit):",
      "    fibo = [0, 1]",
      "    while fibo[-1] + fibo[-2] <= limit:",
      "        fibo.append(fibo[-1] + fibo[-2])",
      "    return set(fibo)",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "fibo_set = generate_fibo(2 * max(arr))",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        if arr[i] + arr[j] in fibo_set:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm cặp số có tổng Fibonacci",
    "input_sample": [
      "6",
      "1 3 2 4 5 8"
    ],
    "output_sample": [
      "5"
    ],
    "point": "250",
    "short_name": "SUMFIBO"
  },
  {
    "code_sample": [
      "def is_perfect(x):",
      "    if x < 2:",
      "        return False",
      "    s = 1",
      "    for i in range(2, int(x ** 0.5) + 1):",
      "        if x % i == 0:",
      "            s += i",
      "            if i != x // i:",
      "                s += x // i",
      "    return s == x",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        if is_perfect(arr[i] + arr[j]):",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm cặp số có tổng là một số hoàn hảo trong dãy số nguyên",
    "input_sample": [
      "6",
      "1 5 27 1 27 1"
    ],
    "output_sample": [
      "3"
    ],
    "point": "250",
    "short_name": "SUMPERFECT"
  },
  {
    "code_sample": [
      "def is_abbr(word):",
      "    return word.isupper() and word.isalpha()",
      "",
      "s = input()",
      "for ch in '.,!?;:':",
      "    s = s.replace(ch, ' ')",
      "words = s.split()",
      "abbr_count = {}",
      "for w in words:",
      "    if is_abbr(w):",
      "        if w in abbr_count:",
      "            abbr_count[w] += 1",
      "        else:",
      "            abbr_count[w] = 1",
      "",
      "total = sum(abbr_count.values())",
      "max_freq = 0",
      "res = []",
      "for k in abbr_count:",
      "    if abbr_count[k] > max_freq:",
      "        max_freq = abbr_count[k]",
      "        res = [k]",
      "    elif abbr_count[k] == max_freq:",
      "        res.append(k)",
      "",
      "print(total)",
      "print(','.join(sorted(res)))"
    ],
    "id": "Thống kê từ viết tắt trong email",
    "input_sample": [
      "FYI, pls RSVP ASAP. FYI and FYI again!"
    ],
    "output_sample": [
      "4",
      "FYI"
    ],
    "point": "230",
    "short_name": "ABBRCOUNT"
  },
  {
    "code_sample": [
      "def count_syllables(word):",
      "    return len(word.split())",
      "",
      "s = input()",
      "for ch in '.,!?;:':",
      "    s = s.replace(ch, ' ')",
      "words = s.split()",
      "single = 0",
      "compound = 0",
      "freq = {}",
      "for w in words:",
      "    if ' ' in w:",
      "        continue",
      "    if len(w) == 0:",
      "        continue",
      "    if '-' in w:",
      "        w = w.replace('-', ' ')",
      "    if ' ' in w:",
      "        continue",
      "    if w.count('_') > 0:",
      "        w = w.replace('_', ' ')",
      "    if ' ' in w:",
      "        continue",
      "    if ' ' not in w:",
      "        syllables = w.count(' ') + 1",
      "        if syllables == 1:",
      "            single += 1",
      "        else:",
      "            compound += 1",
      "            if w in freq:",
      "                freq[w] += 1",
      "            else:",
      "                freq[w] = 1",
      "",
      "max_freq = 0",
      "res = []",
      "for k in freq:",
      "    if freq[k] > max_freq:",
      "        max_freq = freq[k]",
      "        res = [k]",
      "    elif freq[k] == max_freq:",
      "        res.append(k)",
      "",
      "print(single, compound)",
      "print(' '.join(sorted(res)))"
    ],
    "id": "Thống kê số lượng từ đơn, từ ghép trong bài báo",
    "input_sample": [
      "Nghiên cứu phát triển, phát triển công nghệ, phát triển bền vững."
    ],
    "output_sample": [
      "1 3",
      "phát triển"
    ],
    "point": "270",
    "short_name": "WORDSTAT"
  },
  {
    "code_sample": [
      "s = input()",
      "for ch in '.,!?;:':",
      "    s = s.replace(ch, ' ')",
      "words = s.lower().split()",
      "freq = {}",
      "for w in words:",
      "    if w in freq:",
      "        freq[w] += 1",
      "    else:",
      "        freq[w] = 1",
      "common = 0",
      "uncommon = 0",
      "rare = 0",
      "rare_words = []",
      "for k in freq:",
      "    if freq[k] >= 5:",
      "        common += 1",
      "    elif freq[k] >= 2:",
      "        uncommon += 1",
      "    else:",
      "        rare += 1",
      "        rare_words.append(k)",
      "print(common, uncommon, rare)",
      "print(' '.join(sorted(rare_words)))"
    ],
    "id": "Thống kê từ theo mức độ phổ biến trong báo cáo kinh doanh Cho nội dung một báo cáo kinh doanh, các từ trong báo cáo được phân cách bởi dấu cách hoặc dấu câu. Hãy thống kê từ theo mức độ phổ biến: từ thông dụng, từ ít thông dụng, và từ hiếm gặp dựa trên tần suất xuất hiện của chúng.",
    "input_sample": [
      "doanh thu tăng lợi nhuận tăng tăng chi phí giảm doanh thu"
    ],
    "output_sample": [
      "1 2 2",
      "lợi nhuận chi phí"
    ],
    "point": "240",
    "short_name": "WORDSTAT2"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max1 = -1",
      "max2 = -1",
      "for num in arr:",
      "    if num > max1:",
      "        max2 = max1",
      "        max1 = num",
      "    elif num > max2 and num < max1:",
      "        max2 = num",
      "print(max2)"
    ],
    "id": "Tìm số lớn thứ hai",
    "input_sample": [
      "6",
      "5 1 9 3 9 7"
    ],
    "output_sample": [
      "7"
    ],
    "point": "150",
    "short_name": "SECONDMAX"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "mark = [False] * (n + 2)",
      "for num in arr:",
      "    if num <= n + 1:",
      "        mark[num] = True",
      "for i in range(1, n + 2):",
      "    if not mark[i]:",
      "        print(i)",
      "        break"
    ],
    "id": "Số nhỏ nhất không xuất hiện",
    "input_sample": [
      "7",
      "1 2 3 6 4 1 2"
    ],
    "output_sample": [
      "5"
    ],
    "point": "170",
    "short_name": "MINMISS"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    if num == k:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lần xuất hiện",
    "input_sample": [
      "7 2",
      "1 2 3 2 4 2 5"
    ],
    "output_sample": [
      "3"
    ],
    "point": "100",
    "short_name": "COUNTCUR"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_square(n):",
      "    return int(math.sqrt(n))**2 == n",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_square = -1",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        total = arr[i] + arr[j]",
      "        if is_square(total) and total > max_square:",
      "            max_square = total",
      "print(max_square)"
    ],
    "id": "Số chính phương lớn nhất từ tổng hai số",
    "input_sample": [
      "5",
      "1 3 6 10 15"
    ],
    "output_sample": [
      "25"
    ],
    "point": "140",
    "short_name": "MAXSQUARE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_diff = -1",
      "for i in range(n):",
      "    for j in range(n):",
      "        if i != j:",
      "            diff = abs(arr[i] - arr[j])",
      "            if diff % 2 == 0 and diff > max_diff:",
      "                max_diff = diff",
      "print(max_diff)"
    ],
    "id": "Tìm hai số có hiệu lớn nhất",
    "input_sample": [
      "6",
      "1 3 6 8 10 13"
    ],
    "output_sample": [
      "12"
    ],
    "point": "120",
    "short_name": "MAXDIFFEVN"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort()",
      "res = -1",
      "for i in range(n):",
      "    for j in range(i+1, n):",
      "        for k in range(j+1, n):",
      "            s = arr[i] + arr[j] + arr[k]",
      "            if is_prime(s):",
      "                res = s",
      "                break",
      "        if res != -1:",
      "            break",
      "    if res != -1:",
      "        break",
      "if res != -1:",
      "    print(res)",
      "else:",
      "    print(1)"
    ],
    "id": "Tìm tổng nhỏ nhất của ba phần tử",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "7"
    ],
    "point": "150",
    "short_name": "MIN3SUMPRI"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "count = 0",
      "for i in range(n):",
      "    for j in range(i, n):",
      "        if s[i:j+1] == s[i:j+1][::-1]:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm xâu con đối xứng",
    "input_sample": [
      "5",
      "ababa"
    ],
    "output_sample": [
      "9"
    ],
    "point": "210",
    "short_name": "COUNT_PALI"
  },
  {
    "code_sample": [
      "n = int(input())",
      "s = input()",
      "result = ''",
      "for length in range(n-1, 0, -1):",
      "    found = {}",
      "    for i in range(n - length + 1):",
      "        sub = s[i:i+length]",
      "        if sub in found:",
      "            result = sub",
      "            break",
      "        found[sub] = 1",
      "    if result != '':",
      "        break",
      "if result == '':",
      "    print('-1')",
      "else:",
      "    print(result)"
    ],
    "id": "Xâu ký tự lặp lại",
    "input_sample": [
      "10",
      "abcabcabca"
    ],
    "output_sample": [
      "abca"
    ],
    "point": "250",
    "short_name": "REPEATSTR"
  },
  {
    "code_sample": [
      "n = int(input())",
      "k = int(input())",
      "s = input()",
      "max_len = 0",
      "start = 0",
      "count = {}",
      "for end in range(n):",
      "    ch = s[end]",
      "    if ch not in count:",
      "        count[ch] = 0",
      "    count[ch] += 1",
      "    while len(count) > k:",
      "        count[s[start]] -= 1",
      "        if count[s[start]] == 0:",
      "            del count[s[start]]",
      "        start += 1",
      "    max_len = max(max_len, end - start + 1)",
      "print(max_len)"
    ],
    "id": "Xâu có số ký tự khác nhau tối thiểu",
    "input_sample": [
      "10",
      "2",
      "abcbaacbcb"
    ],
    "output_sample": [
      "6"
    ],
    "point": "230",
    "short_name": "MINUNIQUE"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "s = input()",
      "total = 0",
      "special = 0",
      "number = ''",
      "for ch in s:",
      "    if ch.isdigit():",
      "        number += ch",
      "    else:",
      "        if number != '':",
      "            if is_prime(int(number)):",
      "                total += int(number)",
      "            number = ''",
      "        if not ch.isalnum() and ch != ' ':",
      "            special += 1",
      "if number != '':",
      "    if is_prime(int(number)):",
      "        total += int(number)",
      "print(str(total) + '_' + str(special))"
    ],
    "id": "Tổng số nguyên tố và số ký tự đặc biệt Cho một xâu ký tự, tìm tổng các số nguyên tố trong xâu và ghép với số lượng ký tự đặc biệt (không phải chữ cái hay số).",
    "input_sample": [
      "abc12#7@%5xy*"
    ],
    "output_sample": [
      "24_4"
    ],
    "point": "230",
    "short_name": "PRIMECHAR"
  },
  {
    "code_sample": [
      "s = input()",
      "max_num = -1",
      "letter_count = 0",
      "num = ''",
      "for ch in s:",
      "    if ch.isdigit():",
      "        num += ch",
      "    else:",
      "        if num != '':",
      "            if int(num) > max_num:",
      "                max_num = int(num)",
      "            num = ''",
      "        if ch.isalpha():",
      "            letter_count += 1",
      "if num != '':",
      "    if int(num) > max_num:",
      "        max_num = int(num)",
      "print(str(max_num) + '_' + str(letter_count))"
    ],
    "id": "Số nguyên lớn nhất và số chữ cái",
    "input_sample": [
      "abc12def456gh78@#"
    ],
    "output_sample": [
      "456_9"
    ],
    "point": "220",
    "short_name": "MAXNUMCHAR"
  },
  {
    "code_sample": [
      "s = input()",
      "total = 0",
      "num = ''",
      "space_count = 0",
      "for ch in s:",
      "    if ch.isdigit():",
      "        num += ch",
      "    else:",
      "        if num != '':",
      "            if int(num) % 3 == 0:",
      "                total += int(num)",
      "            num = ''",
      "        if ch == ' ':",
      "            space_count += 1",
      "if num != '':",
      "    if int(num) % 3 == 0:",
      "        total += int(num)",
      "print(str(total) + '_' + str(space_count))"
    ],
    "id": "Tổng các số chia hết cho 3 và số khoảng trắng",
    "input_sample": [
      "abc12 45xx3 11 66@#"
    ],
    "output_sample": [
      "126_3"
    ],
    "point": "210",
    "short_name": "SUMDIV3WS"
  },
  {
    "code_sample": [
      "s = input()",
      "l, r = map(int, input().split())",
      "sub = s[l-1:r]",
      "count = 0",
      "for ch in sub:",
      "    if sub.count(ch) % 2 == 0:",
      "        count += 1",
      "if count == len(sub):",
      "    print(\"Yes\")",
      "else:",
      "    print(\"No\")"
    ],
    "id": "Kiểm tra xâu chẵn trong khoảng con",
    "input_sample": [
      "abacaba",
      "2 5"
    ],
    "output_sample": [
      "No"
    ],
    "point": "150",
    "short_name": "EVENSUBSTR"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "max_len = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n + 1):",
      "        sub = s[i:j]",
      "        if len(sub) % 2 == 0:",
      "            count = {}",
      "            for ch in sub:",
      "                if ch in count:",
      "                    count[ch] += 1",
      "                else:",
      "                    count[ch] = 1",
      "            even = True",
      "            for v in count.values():",
      "                if v % 2 != 0:",
      "                    even = False",
      "                    break",
      "            if even and len(sub) > max_len:",
      "                max_len = len(sub)",
      "print(max_len)"
    ],
    "id": "Xâu chẵn dài nhất",
    "input_sample": [
      "abcabc"
    ],
    "output_sample": [
      "6"
    ],
    "point": "130",
    "short_name": "EVENLENSTR"
  },
  {
    "code_sample": [
      "s = input()",
      "count = {}",
      "for ch in s:",
      "    if ch in count:",
      "        count[ch] += 1",
      "    else:",
      "        count[ch] = 1",
      "remove = 0",
      "for v in count.values():",
      "    if v % 2 != 0:",
      "        remove += 1",
      "print(remove)"
    ],
    "id": "Tối ưu hóa xâu thành xâu chẵn",
    "input_sample": [
      "aabbcccd"
    ],
    "output_sample": [
      "1"
    ],
    "point": "110",
    "short_name": "EVENSTR"
  },
  {
    "code_sample": [
      "m, n, k = map(int, input().split())",
      "count = 0",
      "for _ in range(m):",
      "    row = list(map(int, input().split()))",
      "    for x in row:",
      "        if x > k:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm phần tử lớn hơn k",
    "input_sample": [
      "2 3 5",
      "1 6 3",
      "7 8 2"
    ],
    "output_sample": [
      "3"
    ],
    "point": "100",
    "short_name": "COUNTGTK"
  },
  {
    "code_sample": [
      "m, n, k = map(int, input().split())",
      "for _ in range(m):",
      "    row = list(map(int, input().split()))",
      "    count = 0",
      "    for x in row:",
      "        if x == k:",
      "            count += 1",
      "    print(count)"
    ],
    "id": "Đếm phần tử bằng k theo hàng",
    "input_sample": [
      "3 4 2",
      "2 3 2 4",
      "5 2 2 2",
      "1 1 1 1"
    ],
    "output_sample": [
      "2",
      "3",
      "0"
    ],
    "point": "100",
    "short_name": "COUNTKEQ"
  },
  {
    "code_sample": [
      "m, n, k = map(int, input().split())",
      "a = []",
      "for _ in range(m):",
      "    a.append(list(map(int, input().split())))",
      "for j in range(n):",
      "    count = 0",
      "    for i in range(m):",
      "        if a[i][j] == k:",
      "            count += 1",
      "    print(count)"
    ],
    "id": "Đếm phần tử bằng k theo cột",
    "input_sample": [
      "3 4 2",
      "2 3 2 4",
      "5 2 2 2",
      "1 1 1 1"
    ],
    "output_sample": [
      "1",
      "1",
      "2",
      "1"
    ],
    "point": "110",
    "short_name": "COUNTCOLK"
  },
  {
    "code_sample": [
      "x = float(input())",
      "phan_nguyen = int(x)",
      "phan_thap_phan = x - phan_nguyen",
      "if phan_thap_phan >= 0.6:",
      "    print(phan_nguyen + 1)",
      "else:",
      "    print(phan_nguyen)"
    ],
    "id": "Làm tròn thập phân theo ngưỡng",
    "input_sample": [
      "12.45678"
    ],
    "output_sample": [
      "12"
    ],
    "point": "50",
    "short_name": "ROUNDTHRES"
  },
  {
    "code_sample": [
      "x = float(input())",
      "print(int(x))"
    ],
    "id": "Tìm số nguyên lớn nhất nhỏ hơn X",
    "input_sample": [
      "45.789"
    ],
    "output_sample": [
      "45"
    ],
    "point": "20",
    "short_name": "FLOORREAL"
  },
  {
    "code_sample": [
      "x = input()",
      "nguyen, thapphan = x.split('.')",
      "nguyen = int(nguyen)",
      "tp = thapphan[:6]",
      "so = int(x) + (int(tp[0]) >= '5')",
      "if int(tp[5]) % 2 == 1:",
      "    so -= 1",
      "print(so)"
    ],
    "id": "Làm tròn với điều kiện",
    "input_sample": [
      "42.735291"
    ],
    "output_sample": [
      "42"
    ],
    "point": "50",
    "short_name": "ROUNDODD"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b != 0:",
      "        a, b = b, a % b",
      "    return a",
      "",
      "def lcm(a, b):",
      "    return a * b // gcd(a, b)",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "kq = arr[0]",
      "for i in range(1, n):",
      "    kq = lcm(kq, arr[i])",
      "print(kq % 107)"
    ],
    "id": "Tìm bội số chung nhỏ nhất của dãy",
    "input_sample": [
      "4",
      "2 5 10 20"
    ],
    "output_sample": [
      "100"
    ],
    "point": "90",
    "short_name": "LCMARRAY"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b != 0:",
      "        a, b = b, a % b",
      "    return a",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "tong = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        tong += gcd(arr[i], arr[j])",
      "print(tong)"
    ],
    "id": "Tính tổng ước số chung lớn nhất của từng cặp",
    "input_sample": [
      "3",
      "6 8 12"
    ],
    "output_sample": [
      "12"
    ],
    "point": "100",
    "short_name": "SUMGCD"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "minp = 0",
      "for num in sorted(a):",
      "    for i in range(2, num + 1):",
      "        if num % i == 0 and is_prime(i):",
      "            minp = i",
      "            break",
      "    if minp > 0:",
      "        break",
      "res = []",
      "for x in a:",
      "    if x % minp == 0:",
      "        res.append(x)",
      "if len(res) == 0:",
      "    print(-1)",
      "else:",
      "    print(' '.join(map(str, res)))"
    ],
    "id": "Tìm các số chia hết cho ước số nguyên tố nhỏ nhất của dãy",
    "input_sample": [
      "5",
      "10 15 25 18 27"
    ],
    "output_sample": [
      "10 15 25"
    ],
    "point": "130",
    "short_name": "DIVMINPRM"
  },
  {
    "code_sample": [
      "def is_leap(year):",
      "    if year % 400 == 0:",
      "        return True",
      "    if year % 100 == 0:",
      "        return False",
      "    if year % 4 == 0:",
      "        return True",
      "    return False",
      "",
      "month, year = map(int, input().split())",
      "days_in_month = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]",
      "if month == 2 and is_leap(year):",
      "    total_days = 29",
      "else:",
      "    total_days = days_in_month[month]",
      "count = 0",
      "for day in range(1, total_days + 1):",
      "    if day % 2 == 0:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Xác định số ngày chẵn trong một tháng",
    "input_sample": [
      "2 2024"
    ],
    "output_sample": [
      "14"
    ],
    "point": "130",
    "short_name": "EVENDAYS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "freq = {}",
      "for num in arr:",
      "    if num in freq:",
      "        freq[num] += 1",
      "    else:",
      "        freq[num] = 1",
      "for key in freq:",
      "    print((key, freq[key]))"
    ],
    "id": "Đếm số lần xuất hiện của từng phần tử trong mảng",
    "input_sample": [
      "8",
      "1 2 2 3 1 4 2 3"
    ],
    "output_sample": [
      "(1, 2)",
      "(2, 3)",
      "(3, 2)",
      "(4, 1)"
    ],
    "point": "170",
    "short_name": "COUNTFREQ"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    s = str(num)",
      "    if s == s[::-1]:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Xác định số đối xứng trong dãy số",
    "input_sample": [
      "6",
      "121 1331 123 77 89 454"
    ],
    "output_sample": [
      "4"
    ],
    "point": "150",
    "short_name": "PALINCOUNT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "total = sum(arr)",
      "left_sum = 0",
      "found = -1",
      "for i in range(n):",
      "    if left_sum == total - left_sum - arr[i]:",
      "        found = i",
      "        break",
      "    left_sum += arr[i]",
      "print(found)"
    ],
    "id": "Tìm số cân bằng trong dãy",
    "input_sample": [
      "7",
      "1 7 3 6 5 6 2"
    ],
    "output_sample": [
      "3"
    ],
    "point": "160",
    "short_name": "BALINDEX"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n ** 0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "count = 0",
      "for i in range(2, n // 2 + 1):",
      "    if is_prime(i) and is_prime(n - i):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số cặp số nguyên tố cộng nhau",
    "input_sample": [
      "10"
    ],
    "output_sample": [
      "2"
    ],
    "point": "200",
    "short_name": "SUMPRPAIR"
  },
  {
    "code_sample": [
      "n = input()",
      "digits = list(n)",
      "digits.sort(reverse=True)",
      "print(''.join(digits))"
    ],
    "id": "Tìm số lớn nhất có thể tạo bằng cách hoán vị các chữ số",
    "input_sample": [
      "2014"
    ],
    "output_sample": [
      "4210"
    ],
    "point": "110",
    "short_name": "MAXPERM"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "multiples = []",
      "others = []",
      "for x in arr:",
      "    if x % k == 0:",
      "        multiples.append(x)",
      "    else:",
      "        others.append(x)",
      "result = multiples + others",
      "print(' '.join(map(str, result)))"
    ],
    "id": "Sắp xếp theo bội số",
    "input_sample": [
      "7 3",
      "1 3 4 6 9 2 5"
    ],
    "output_sample": [
      "3 6 9 1 4 2 5"
    ],
    "point": "130",
    "short_name": "SORTMULTI"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "if n == 0:",
      "    print(0)",
      "elif n == 1:",
      "    print(arr[0])",
      "else:",
      "    dp = [0] * n",
      "    dp[0] = arr[0]",
      "    dp[1] = max(arr[0], arr[1])",
      "    for i in range(2, n):",
      "        dp[i] = max(dp[i - 1], dp[i - 2] + arr[i])",
      "    print(dp[-1])"
    ],
    "id": "Tổng lớn nhất của dãy con không kề nhau",
    "input_sample": [
      "6",
      "3 2 5 10 7 -1"
    ],
    "output_sample": [
      "15"
    ],
    "point": "160",
    "short_name": "MAXSUBSUM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort()",
      "min_diff = abs(arr[1] - arr[0])",
      "for i in range(2, n):",
      "    diff = abs(arr[i] - arr[i - 1])",
      "    if diff < min_diff:",
      "        min_diff = diff",
      "print(min_diff)"
    ],
    "id": "Tìm cặp số có khoảng cách nhỏ nhất",
    "input_sample": [
      "6",
      "4 9 1 32 5 6"
    ],
    "output_sample": [
      "1"
    ],
    "point": "110",
    "short_name": "MINPAIR"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = input()",
      "ok = True",
      "for i in range(len(n)):",
      "    for j in range(i + 1, len(n) + 1):",
      "        part = int(n[i:j])",
      "        if not is_prime(part):",
      "            ok = False",
      "            break",
      "    if not ok:",
      "        break",
      "if ok:",
      "    print(\"PHAI\")",
      "else:",
      "    print(\"KHONG\")"
    ],
    "id": "Số siêu nguyên tố mở rộng",
    "input_sample": [
      "233"
    ],
    "output_sample": [
      "PHAI"
    ],
    "point": "180",
    "short_name": "SUPPRIME"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def digit_sum(n):",
      "    s = 0",
      "    while n > 0:",
      "        s += n % 10",
      "        n //= 10",
      "    return s",
      "",
      "n = int(input())",
      "if is_prime(n) and is_prime(digit_sum(n)):",
      "    print(\"PHAI\")",
      "else:",
      "    print(\"KHONG\")"
    ],
    "id": "Số nguyên tố kỳ lạ",
    "input_sample": [
      "23"
    ],
    "output_sample": [
      "PHAI"
    ],
    "point": "100",
    "short_name": "STRANGEPR"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def prev_prime(n):",
      "    for x in range(n - 1, 1, -1):",
      "        if is_prime(x):",
      "            return x",
      "    return None",
      "",
      "def next_prime(n):",
      "    x = n + 1",
      "    while True:",
      "        if is_prime(x):",
      "            return x",
      "        x += 1",
      "",
      "n = int(input())",
      "if is_prime(n):",
      "    p = prev_prime(n)",
      "    q = next_prime(n)",
      "    if p is not None and q is not None and n > (p + q) / 2:",
      "        print(\"PHAI\")",
      "    else:",
      "        print(\"KHONG\")",
      "else:",
      "    print(\"KHONG\")"
    ],
    "id": "Số nguyên tố mạnh",
    "input_sample": [
      "29"
    ],
    "output_sample": [
      "PHAI"
    ],
    "point": "120",
    "short_name": "STRONGPR"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b != 0:",
      "        a, b = b, a % b",
      "    return a",
      "",
      "n, m = map(int, input().split())",
      "cuts = m - gcd(n, m)",
      "print(cuts)"
    ],
    "id": "Chia bánh pizza",
    "input_sample": [
      "3 4"
    ],
    "output_sample": [
      "5"
    ],
    "point": "60",
    "short_name": "PIZZACUT"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b != 0:",
      "        a, b = b, a % b",
      "    return a",
      "",
      "n, m = map(int, input().split())",
      "div = gcd(n, m)",
      "cuts = m - div",
      "print(cuts)"
    ],
    "id": "Chia công việc",
    "input_sample": [
      "10 4"
    ],
    "output_sample": [
      "2"
    ],
    "point": "60",
    "short_name": "CHIACV"
  },
  {
    "code_sample": [
      "def gcd(a, b):",
      "    while b != 0:",
      "        a, b = b, a % b",
      "    return a",
      "",
      "n, m = map(int, input().split())",
      "common = gcd(n, m)",
      "cuts = m - common",
      "print(cuts)"
    ],
    "id": "Chia quà",
    "input_sample": [
      "12 5"
    ],
    "output_sample": [
      "3"
    ],
    "point": "60",
    "short_name": "CHIAQUA"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    i = 2",
      "    while i * i <= n:",
      "        if n % i == 0:",
      "            return False",
      "        i += 1",
      "    return True",
      "",
      "def is_palindrome(num):",
      "    return str(num) == str(num)[::-1]",
      "",
      "x = int(input())",
      "y = 1",
      "while True:",
      "    s = x + y",
      "    if is_prime(s) and is_palindrome(s):",
      "        print(y)",
      "        break",
      "    y += 1"
    ],
    "id": "Số nguyên tố đối xứng nhỏ nhất",
    "input_sample": [
      "89"
    ],
    "output_sample": [
      "12"
    ],
    "point": "80",
    "short_name": "NGUYENDTO"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    i = 2",
      "    while i * i <= n:",
      "        if n % i == 0:",
      "            return False",
      "        i += 1",
      "    return True",
      "",
      "x = int(input())",
      "y = 1",
      "while True:",
      "    s = x + y",
      "    if is_prime(s) and s > x:",
      "        print(y)",
      "        break",
      "    y += 1"
    ],
    "id": "Tìm số chia hết nhỏ nhất",
    "input_sample": [
      "24"
    ],
    "output_sample": [
      "6"
    ],
    "point": "90",
    "short_name": "TIMCHIAHET"
  },
  {
    "code_sample": [
      "def is_power_of_3(n):",
      "    while n % 3 == 0 and n > 0:",
      "        n = n // 3",
      "    return n == 1",
      "",
      "x = int(input())",
      "y = 1",
      "while True:",
      "    s = x + y",
      "    if is_power_of_3(s) and s > x:",
      "        print(y)",
      "        break",
      "    y += 1"
    ],
    "id": "Tìm số lũy thừa của 3 gần nhất",
    "input_sample": [
      "25"
    ],
    "output_sample": [
      "2"
    ],
    "point": "90",
    "short_name": "TIMLUYTHUA"
  },
  {
    "code_sample": [
      "A, B, C, D = map(int, input().split())",
      "count = 0",
      "for X in range(A, B+1):",
      "    for Y in range(C, D+1):",
      "        if Y % X == 0:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Chọn số may mắn",
    "input_sample": [
      "1 3 2 6"
    ],
    "output_sample": [
      "5"
    ],
    "point": "110",
    "short_name": "CHONMAYMAN"
  },
  {
    "code_sample": [
      "A, B, C, D = map(int, input().split())",
      "X = 1",
      "while True:",
      "    if B + X < C or A + X > D:",
      "        print(X)",
      "        break",
      "    X += 1"
    ],
    "id": "Sắp xếp khoảng",
    "input_sample": [
      "1 5 8 10"
    ],
    "output_sample": [
      "3"
    ],
    "point": "70",
    "short_name": "SAPXEPKHO"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "A, B, C, D = map(int, input().split())",
      "primes_x = []",
      "primes_y = []",
      "for x in range(A, B + 1):",
      "    if is_prime(x):",
      "        primes_x.append(x)",
      "for y in range(C, D + 1):",
      "    if is_prime(y):",
      "        primes_y.append(y)",
      "count = 0",
      "for x in primes_x:",
      "    for y in primes_y:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số nguyên tố",
    "input_sample": [
      "2 5 3 7"
    ],
    "output_sample": [
      "6"
    ],
    "point": "110",
    "short_name": "DEMSNT"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "k = int(input())",
      "m = int(input())",
      "count = 0",
      "start = 10**(k-1)",
      "end = 10**k - 1",
      "for num in range(start, end + 1):",
      "    if num % 10 == m and is_prime(num):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Số nguyên tố kết thúc bằng chữ số đặc biệt",
    "input_sample": [
      "2",
      "7"
    ],
    "output_sample": [
      "2"
    ],
    "point": "110",
    "short_name": "SNTKTC"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def digit_sum(num):",
      "    s = 0",
      "    while num > 0:",
      "        s += num % 10",
      "        num //= 10",
      "    return s",
      "",
      "n, S = map(int, input().split())",
      "start = 10**(n-1)",
      "end = 10**n - 1",
      "count = 0",
      "for num in range(start, end + 1):",
      "    if digit_sum(num) == S and is_prime(num):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Số nguyên tố có tổng chữ số nhất định",
    "input_sample": [
      "2 5"
    ],
    "output_sample": [
      "2"
    ],
    "point": "130",
    "short_name": "SNTTSCN"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def digit_product(num):",
      "    p = 1",
      "    while num > 0:",
      "        p *= num % 10",
      "        num //= 10",
      "    return p",
      "",
      "n, S = map(int, input().split())",
      "start = 10**(n-1)",
      "end = 10**n - 1",
      "count = 0",
      "for num in range(start, end + 1):",
      "    if digit_product(num) == S and is_prime(num):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Số nguyên tố có tích chữ số nhất định",
    "input_sample": [
      "3 24"
    ],
    "output_sample": [
      "2"
    ],
    "point": "130",
    "short_name": "SNTTICH"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    if len(str(num)) == n and is_prime(num):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng số nguyên tố có chữ số bằng n",
    "input_sample": [
      "5",
      "12345 23456 34567 45678 56789"
    ],
    "output_sample": [
      "1"
    ],
    "point": "90",
    "short_name": "DEMPRIMEN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = 0",
      "for num in arr:",
      "    if num % 5 == 0 and len(str(num)) % 2 == 1:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng số nguyên dương chia hết cho 5 và có số chữ số lẻ",
    "input_sample": [
      "5",
      "10 123 55 7 500"
    ],
    "output_sample": [
      "3"
    ],
    "point": "90",
    "short_name": "DEM5ODD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = [0]*10",
      "for num in arr:",
      "    for c in str(num):",
      "        count[int(c)] += 1",
      "max_count = max(count)",
      "res = 0",
      "for i in range(10):",
      "    if count[i] == max_count:",
      "        res = i",
      "print(res)"
    ],
    "id": "Tìm chữ số xuất hiện nhiều nhất trong danh sách",
    "input_sample": [
      "5",
      "12 22 345 67 22"
    ],
    "output_sample": [
      "2"
    ],
    "point": "110",
    "short_name": "MAXDIGIT"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "prefix_mod = {0: -1}",
      "prefix_sum = 0",
      "min_len = n + 1",
      "res = 0",
      "for i in range(n):",
      "    prefix_sum += arr[i]",
      "    mod = prefix_sum % k",
      "    if mod in prefix_mod:",
      "        length = i - prefix_mod[mod]",
      "        if length < min_len:",
      "            min_len = length",
      "            res = prefix_sum - (prefix_sum - sum(arr[prefix_mod[mod]+1:i+1])) + 0  # simplify",
      "    else:",
      "        prefix_mod[mod] = i",
      "print(res if min_len != n + 1 else 0)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng chia hết cho k và ngắn nhất",
    "input_sample": [
      "6 5",
      "2 7 6 1 4 5"
    ],
    "output_sample": [
      "5"
    ],
    "point": "140",
    "short_name": "SUBSUMK"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "for start in range(n):",
      "    total = 0",
      "    has_negative = False",
      "    for end in range(start, n):",
      "        if arr[end] < 0:",
      "            has_negative = True",
      "            break",
      "        total += arr[end]",
      "        if total % k == 0 and not has_negative and total > max_sum:",
      "            max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng chia hết cho k mà không chứa số âm",
    "input_sample": [
      "7 5",
      "1 2 -1 3 4 5 6"
    ],
    "output_sample": [
      "15"
    ],
    "point": "100",
    "short_name": "SUBSUMNK"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "for start in range(n):",
      "    total = 0",
      "    odd_count = 0",
      "    for end in range(start, n):",
      "        total += arr[end]",
      "        if arr[end] % 2 == 1:",
      "            odd_count += 1",
      "        if total % k == 0 and odd_count > 0 and total > max_sum:",
      "            max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng chia hết cho k với số lượng phần tử lẻ",
    "input_sample": [
      "6 5",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "15"
    ],
    "point": "140",
    "short_name": "SUBSUMODD"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for w in words:",
      "    if len(w) % 2 == 1:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có số lượng ký tự lẻ",
    "input_sample": [
      "hello world this is a test"
    ],
    "output_sample": [
      "3"
    ],
    "point": "90",
    "short_name": "ODDWORDCNT"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_len = 0",
      "res = ''",
      "for w in words:",
      "    if len(w) % 2 == 0 and len(w) > max_len:",
      "        max_len = len(w)",
      "        res = w",
      "print(res)"
    ],
    "id": "Tìm từ dài nhất có số lượng ký tự chẵn trong xâu",
    "input_sample": [
      "hello world even test case try"
    ],
    "output_sample": [
      "hello"
    ],
    "point": "110",
    "short_name": "LONGEVEN"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for w in words:",
      "    if len(w) % 2 == 0:",
      "        chars = set()",
      "        repeated = False",
      "        for c in w:",
      "            if c in chars:",
      "                repeated = True",
      "                break",
      "            chars.add(c)",
      "        if not repeated:",
      "            count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có số lượng ký tự chẵn và không chứa ký tự lặp lại",
    "input_sample": [
      "apple banana test abcde"
    ],
    "output_sample": [
      "2"
    ],
    "point": "140",
    "short_name": "EVENUNIQ"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "res = ''",
      "for w in words:",
      "    has_upper = False",
      "    has_lower = False",
      "    for c in w:",
      "        if c.isupper():",
      "            has_upper = True",
      "        if c.islower():",
      "            has_lower = True",
      "    if has_upper and has_lower:",
      "        if len(w) > len(res):",
      "            res = w",
      "print(res)"
    ],
    "id": "Tìm từ dài nhất có chứa cả ký tự viết hoa và viết thường",
    "input_sample": [
      "Hello world ThisIsTest EXample testCase"
    ],
    "output_sample": [
      "ThisIsTest"
    ],
    "point": "110",
    "short_name": "MIXCASE"
  },
  {
    "code_sample": [
      "from collections import deque",
      "",
      "def bfs(start, end, grid, m, n):",
      "    visited = [[-1]*n for _ in range(m)]",
      "    q = deque()",
      "    q.append(start)",
      "    visited[start[0]][start[1]] = 0",
      "    while q:",
      "        x, y = q.popleft()",
      "        for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:",
      "            nx, ny = x + dx, y + dy",
      "            if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1 and visited[nx][ny] == -1:",
      "                visited[nx][ny] = visited[x][y] + 1",
      "                q.append((nx, ny))",
      "    return visited[end[0]][end[1]]",
      "",
      "m, n, k = map(int, input().split())",
      "grid = [list(map(int, input().split())) for _ in range(m)]",
      "r, c = map(int, input().split())",
      "p = (r-1, c-1)",
      "start = (0, 0)",
      "end = (m-1, n-1)",
      "a = bfs(start, p, grid, m, n)",
      "b = bfs(p, end, grid, m, n)",
      "if a == -1 or b == -1:",
      "    print(0)",
      "else:",
      "    print(1)"
    ],
    "id": "Tìm số con đường ngắn nhất từ góc trên trái đến góc dưới phải với điều kiện phải đi qua một ô xác định",
    "input_sample": [
      "3 3 1",
      "1 1 1",
      "0 1 0",
      "1 1 1",
      "2 2"
    ],
    "output_sample": [
      "2"
    ],
    "point": "260",
    "short_name": "PATHPOINT"
  },
  {
    "code_sample": [
      "s = input().split()",
      "vowels = set('aeiou')",
      "res = ''",
      "for word in s:",
      "    chars = set(word)",
      "    if vowels.issubset(chars):",
      "        if len(word) > len(res):",
      "            res = word",
      "print(res)"
    ],
    "id": "Tìm từ dài nhất có chứa tất cả các ký tự là nguyên âm Input:",
    "input_sample": [
      "education area unique output amazing eagle"
    ],
    "output_sample": [
      "education"
    ],
    "point": "210",
    "short_name": "LONGVOWEL"
  },
  {
    "code_sample": [
      "s = input().split()",
      "res = ''",
      "for word in s:",
      "    has_digit = False",
      "    for c in word:",
      "        if c in '0123456789':",
      "            has_digit = True",
      "            break",
      "    if not has_digit and len(word) > len(res):",
      "        res = word",
      "print(res)"
    ],
    "id": "Tìm từ dài nhất mà không chứa ký tự nào là số",
    "input_sample": [
      "abc123 test longestword nodigits123 abcde"
    ],
    "output_sample": [
      "longestword"
    ],
    "point": "190",
    "short_name": "LONGNODIG"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "arr.sort()",
      "if len(arr) < 5:",
      "    print(-1)",
      "else:",
      "    print(arr[4])"
    ],
    "id": "Tìm phần tử nhỏ thứ năm trong danh sách",
    "input_sample": [
      "7",
      "4 2 7 3 1 9 5"
    ],
    "output_sample": [
      "5"
    ],
    "point": "150",
    "short_name": "FIFTHMIN"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "primes = []",
      "for x in arr:",
      "    if is_prime(x):",
      "        primes.append(x)",
      "primes.sort(reverse=True)",
      "if len(primes) < 5:",
      "    print(-1)",
      "else:",
      "    print(primes[4])"
    ],
    "id": "Tìm phần tử lớn thứ năm mà là số nguyên tố trong danh sách",
    "input_sample": [
      "10",
      "11 7 5 2 3 13 17 19 23 29"
    ],
    "output_sample": [
      "13"
    ],
    "point": "190",
    "short_name": "FIFTHPRIME"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "result = []",
      "for x in arr:",
      "    if x % k == 0:",
      "        result.append(x)",
      "result.sort(reverse=True)",
      "if len(result) < 5:",
      "    print(-1)",
      "else:",
      "    print(result[4])"
    ],
    "id": "Tìm phần tử lớn thứ năm mà chia hết cho k trong danh sách",
    "input_sample": [
      "10 5",
      "10 25 30 12 15 35 40 20 5 45"
    ],
    "output_sample": [
      "20"
    ],
    "point": "170",
    "short_name": "FIFTHDIVK"
  },
  {
    "code_sample": [
      "n, x = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "min_sum = 10**18",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += a[j]",
      "        if total >= x:",
      "            if total < min_sum:",
      "                min_sum = total",
      "            break",
      "print(min_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất lớn hơn hoặc bằng x",
    "input_sample": [
      "8 15",
      "1 2 3 4 5 6 7 8"
    ],
    "output_sample": [
      "15"
    ],
    "point": "210",
    "short_name": "MINSEGX"
  },
  {
    "code_sample": [
      "n, x = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "min_len = n + 1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += a[j]",
      "        if total == x:",
      "            if j - i + 1 < min_len:",
      "                min_len = j - i + 1",
      "            break",
      "        if total > x:",
      "            break",
      "if min_len == n + 1:",
      "    print(-1)",
      "else:",
      "    print(x)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất bằng x",
    "input_sample": [
      "8 15",
      "1 2 3 4 5 6 7 8"
    ],
    "output_sample": [
      "15"
    ],
    "point": "230",
    "short_name": "MINSEQSUM"
  },
  {
    "code_sample": [
      "n, x = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "res = []",
      "for i in range(n):",
      "    if a[i] < 0:",
      "        continue",
      "    total = 0",
      "    temp = []",
      "    for j in range(i, n):",
      "        if a[j] < 0:",
      "            break",
      "        total += a[j]",
      "        temp.append(a[j])",
      "        if total == x:",
      "            if len(temp) > len(res):",
      "                res = temp[:]",
      "            break",
      "        if total > x:",
      "            break",
      "if res:",
      "    print(' '.join(map(str, res)))",
      "else:",
      "    print(-1)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất bằng x mà không có số âm",
    "input_sample": [
      "10 10",
      "1 2 -1 3 4 2 1 0 5 5"
    ],
    "output_sample": [
      "5 5"
    ],
    "point": "240",
    "short_name": "MAXSEQPOS"
  },
  {
    "code_sample": [
      "s = input().split()",
      "vowels = 'aeiouAEIOU'",
      "min_count = float('inf')",
      "result = ''",
      "for word in s:",
      "    count = 0",
      "    for c in word:",
      "        if c in vowels:",
      "            count += 1",
      "    if count < min_count:",
      "        min_count = count",
      "        result = word",
      "print(result)"
    ],
    "id": "Tìm từ có số lượng nguyên âm ít nhất trong xâu",
    "input_sample": [
      "hoc sinh lop 10a gioi qua"
    ],
    "output_sample": [
      "lop"
    ],
    "point": "180",
    "short_name": "MINVOWEL"
  },
  {
    "code_sample": [
      "s = input().split()",
      "vowels = set('aeiou')",
      "count = 0",
      "for word in s:",
      "    chars = set(word.lower())",
      "    if vowels.issubset(chars):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ có chứa tất cả các nguyên âm",
    "input_sample": [
      "education is a beautiful journey of audio visual experience"
    ],
    "output_sample": [
      "2"
    ],
    "point": "170",
    "short_name": "COUNTVOWEL"
  },
  {
    "code_sample": [
      "s = input().split()",
      "vowels = 'aeiou'",
      "max_vowel = -1",
      "result = ''",
      "for word in s:",
      "    chars = set(word)",
      "    if len(chars) == len(word):",
      "        count = 0",
      "        for ch in word:",
      "            if ch in vowels:",
      "                count += 1",
      "        if count > max_vowel:",
      "            max_vowel = count",
      "            result = word",
      "print(result)"
    ],
    "id": "Tìm từ có số lượng nguyên âm lớn nhất mà không chứa ký tự lặp lại",
    "input_sample": [
      "hello unique education sky"
    ],
    "output_sample": [
      "unique"
    ],
    "point": "180",
    "short_name": "MAXVOWELUNQ"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_len = 0",
      "for i in range(n):",
      "    total = 0",
      "    length = 0",
      "    for j in range(i, n):",
      "        if is_prime(arr[j]):",
      "            break",
      "        total += arr[j]",
      "        length += 1",
      "        if total % k == 0:",
      "            if length > max_len:",
      "                max_len = length",
      "print(max_len)"
    ],
    "id": "Tìm dãy con không chứa số nguyên tố dài nhất mà có tổng các phần tử chia hết cho k Input:",
    "input_sample": [
      "8 5",
      "4 6 8 9 10 3 6 7"
    ],
    "output_sample": [
      "4"
    ],
    "point": "200",
    "short_name": "NONPRIMEK"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_len = 0",
      "cur_len = 0",
      "for x in arr:",
      "    if x % 2 == 1 and not is_prime(x):",
      "        cur_len += 1",
      "        if cur_len > max_len:",
      "            max_len = cur_len",
      "    else:",
      "        cur_len = 0",
      "print(max_len)"
    ],
    "id": "Tìm dãy con không chứa số nguyên tố dài nhất mà không chứa số chẵn",
    "input_sample": [
      "10",
      "1 3 9 5 6 7 15 21 33 35"
    ],
    "output_sample": [
      "4"
    ],
    "point": "200",
    "short_name": "ODDNONPRM"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_len = 0",
      "cur_len = 0",
      "for x in arr:",
      "    if x % 2 == 0 and not is_prime(x):",
      "        cur_len += 1",
      "        if cur_len > max_len:",
      "            max_len = cur_len",
      "    else:",
      "        cur_len = 0",
      "print(max_len)"
    ],
    "id": "Tìm dãy con không chứa số nguyên tố dài nhất mà không chứa số lẻ",
    "input_sample": [
      "10",
      "2 4 6 8 10 3 12 14 16 7"
    ],
    "output_sample": [
      "4"
    ],
    "point": "200",
    "short_name": "EVENNONPR"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = {}",
      "for x in arr:",
      "    if x in count:",
      "        count[x] += 1",
      "    else:",
      "        count[x] = 1",
      "min_freq = min(count.values())",
      "res = []",
      "for k in count:",
      "    if count[k] == min_freq:",
      "        res.append(k)",
      "print(min(res))"
    ],
    "id": "Tìm số xuất hiện ít nhất trong danh sách",
    "input_sample": [
      "10",
      "1 2 2 3 3 3 4 4 4 5"
    ],
    "output_sample": [
      "1"
    ],
    "point": "160",
    "short_name": "MINFREQ"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = {}",
      "for x in arr:",
      "    if is_prime(x):",
      "        if x in count:",
      "            count[x] += 1",
      "        else:",
      "            count[x] = 1",
      "if not count:",
      "    print(-1)",
      "else:",
      "    max_freq = max(count.values())",
      "    res = []",
      "    for k in count:",
      "        if count[k] == max_freq:",
      "            res.append(k)",
      "    print(max(res))"
    ],
    "id": "Tìm số xuất hiện nhiều nhất trong danh sách nhưng phải là số nguyên tố",
    "input_sample": [
      "10",
      "2 3 5 2 3 5 5 7 8 9"
    ],
    "output_sample": [
      "5"
    ],
    "point": "210",
    "short_name": "MAXFREQPRM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "count = {}",
      "for x in arr:",
      "    if x % 2 == 0:",
      "        if x in count:",
      "            count[x] += 1",
      "        else:",
      "            count[x] = 1",
      "if not count:",
      "    print(-1)",
      "else:",
      "    max_freq = max(count.values())",
      "    res = []",
      "    for k in count:",
      "        if count[k] == max_freq:",
      "            res.append(k)",
      "    print(max(res))"
    ],
    "id": "Tìm số xuất hiện nhiều nhất trong danh sách và là số chẵn",
    "input_sample": [
      "12",
      "2 4 6 2 4 6 4 8 10 4 3 1"
    ],
    "output_sample": [
      "4"
    ],
    "point": "210",
    "short_name": "MAXFREQEVN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "min_prod = a[0]",
      "cur_min = a[0]",
      "cur_max = a[0]",
      "for i in range(1, n):",
      "    if a[i] < 0:",
      "        cur_min, cur_max = cur_max, cur_min",
      "    cur_max = max(a[i], cur_max * a[i])",
      "    cur_min = min(a[i], cur_min * a[i])",
      "    min_prod = min(min_prod, cur_min)",
      "print(min_prod)"
    ],
    "id": "Tìm đoạn con liên tiếp có tích nhỏ nhất",
    "input_sample": [
      "5",
      "2 -3 4 -2 1"
    ],
    "output_sample": [
      "-24"
    ],
    "point": "230",
    "short_name": "MINPRODSEG"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "max_prod = 0",
      "i = 0",
      "while i < n:",
      "    while i < n and a[i] < 0:",
      "        i += 1",
      "    cur_prod = 1",
      "    has_num = False",
      "    while i < n and a[i] >= 0:",
      "        cur_prod *= a[i]",
      "        has_num = True",
      "        max_prod = max(max_prod, cur_prod)",
      "        i += 1",
      "    if not has_num:",
      "        i += 1",
      "print(max_prod)"
    ],
    "id": "Tìm đoạn con liên tiếp có tích lớn nhất mà không có số âm",
    "input_sample": [
      "7",
      "1 2 -3 4 5 0 6"
    ],
    "output_sample": [
      "20"
    ],
    "point": "210",
    "short_name": "MAXPRODNP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "max_prod = a[0]",
      "for i in range(n):",
      "    prod = 1",
      "    for j in range(i, n):",
      "        prod *= a[j]",
      "        if (j - i + 1) % 2 == 1:",
      "            max_prod = max(max_prod, prod)",
      "print(max_prod)"
    ],
    "id": "Tìm đoạn con liên tiếp có tích lớn nhất với độ dài lẻ",
    "input_sample": [
      "5",
      "2 3 -1 4 5"
    ],
    "output_sample": [
      "20"
    ],
    "point": "250",
    "short_name": "MAXPRODODD"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "count = 0",
      "for center in range(n):",
      "    l = center",
      "    r = center",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        count += 1",
      "        l -= 1",
      "        r += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng chuỗi con đối xứng có độ dài lẻ",
    "input_sample": [
      "abcba"
    ],
    "output_sample": [
      "7"
    ],
    "point": "220",
    "short_name": "ODDPALIN"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "count = 0",
      "for center in range(n - 1):",
      "    l = center",
      "    r = center + 1",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        count += 1",
      "        l -= 1",
      "        r += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng chuỗi con đối xứng có độ dài chẵn",
    "input_sample": [
      "abccba"
    ],
    "output_sample": [
      "6"
    ],
    "point": "220",
    "short_name": "EVENPALIN"
  },
  {
    "code_sample": [
      "s = input()",
      "n = len(s)",
      "res = ''",
      "for i in range(n):",
      "    l = i",
      "    r = i",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        if r - l + 1 > len(res):",
      "            res = s[l:r+1]",
      "        l -= 1",
      "        r += 1",
      "    l = i",
      "    r = i + 1",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        if r - l + 1 > len(res):",
      "            res = s[l:r+1]",
      "        l -= 1",
      "        r += 1",
      "print(res)"
    ],
    "id": "Tìm chuỗi con đối xứng dài nhất trong xâu",
    "input_sample": [
      "abcbabcbabcba"
    ],
    "output_sample": [
      "abcbabcbabcba"
    ],
    "point": "230",
    "short_name": "MAXPALIN"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n**0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "s = input()",
      "n = len(s)",
      "min_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if is_prime(total):",
      "            if min_sum == -1 or total < min_sum:",
      "                min_sum = total",
      "print(min_sum)"
    ],
    "id": "Tìm chuỗi con có tổng giá trị ASCII là số nguyên tố nhỏ nhất Input:",
    "input_sample": [
      "abcde"
    ],
    "output_sample": [
      "199"
    ],
    "point": "270",
    "short_name": "MINPRIASC"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n**0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "s = input()",
      "n = len(s)",
      "max_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if (j - i + 1) % 2 == 1 and is_prime(total):",
      "            if total > max_sum:",
      "                max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm chuỗi con có tổng giá trị ASCII là số nguyên tố lớn nhất và độ dài lẻ",
    "input_sample": [
      "abcde"
    ],
    "output_sample": [
      "313"
    ],
    "point": "270",
    "short_name": "MAXPRIASC"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n**0.5) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "s = input()",
      "n = len(s)",
      "max_sum = -1",
      "for i in range(n):",
      "    seen = set()",
      "    total = 0",
      "    for j in range(i, n):",
      "        if s[j] in seen:",
      "            break",
      "        seen.add(s[j])",
      "        total += ord(s[j])",
      "        if is_prime(total):",
      "            if total > max_sum:",
      "                max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm chuỗi con có tổng giá trị ASCII là số nguyên tố lớn nhất nhưng không chứa ký tự trùng lặp",
    "input_sample": [
      "abcbde"
    ],
    "output_sample": [
      "313"
    ],
    "point": "310",
    "short_name": "MAXASCNOPR"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "min_sum = sum(a[:k])",
      "curr_sum = min_sum",
      "for i in range(k, n):",
      "    curr_sum = curr_sum + a[i] - a[i - k]",
      "    if curr_sum < min_sum:",
      "        min_sum = curr_sum",
      "print(min_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất với độ dài tối thiểu k",
    "input_sample": [
      "7 3",
      "1 3 2 6 4 2 1"
    ],
    "output_sample": [
      "7"
    ],
    "point": "240",
    "short_name": "MINSUBSUM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "max_sum = 0",
      "for i in range(n):",
      "    curr = 0",
      "    for j in range(i, n):",
      "        curr += a[j]",
      "        if (j - i + 1) % 2 == 0:",
      "            if curr > max_sum:",
      "                max_sum = curr",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất với độ dài chẵn",
    "input_sample": [
      "6",
      "1 2 3 4 5 6"
    ],
    "output_sample": [
      "20"
    ],
    "point": "230",
    "short_name": "MAXEVENSUM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "s = set()",
      "left = 0",
      "curr_sum = 0",
      "max_sum = 0",
      "for right in range(n):",
      "    while a[right] in s:",
      "        s.remove(a[left])",
      "        curr_sum -= a[left]",
      "        left += 1",
      "    s.add(a[right])",
      "    curr_sum += a[right]",
      "    if curr_sum > max_sum:",
      "        max_sum = curr_sum",
      "print(max_sum)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng lớn nhất mà không có số nào lặp lại",
    "input_sample": [
      "8",
      "1 2 1 3 4 2 5 6"
    ],
    "output_sample": [
      "20"
    ],
    "point": "240",
    "short_name": "MAXNODUP"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "a, b = map(int, input().split())",
      "total = 0",
      "for i in range(a, b + 1):",
      "    if is_prime(i):",
      "        total += i",
      "print(total)"
    ],
    "id": "Tìm tổng các số nguyên tố trong đoạn [a, b]",
    "input_sample": [
      "10 20"
    ],
    "output_sample": [
      "60"
    ],
    "point": "170",
    "short_name": "SUMPRIME"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "a, b = map(int, input().split())",
      "ans = -1",
      "for i in range(b, a - 1, -1):",
      "    if is_prime(i):",
      "        ans = i",
      "        break",
      "print(ans)"
    ],
    "id": "Tìm số nguyên tố lớn nhất trong đoạn [a, b]",
    "input_sample": [
      "10 20"
    ],
    "output_sample": [
      "19"
    ],
    "point": "170",
    "short_name": "MAXPRIME2"
  },
  {
    "code_sample": [
      "import math",
      "",
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(math.sqrt(n)) + 1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "def digit_sum(n):",
      "    s = 0",
      "    while n > 0:",
      "        s += n % 10",
      "        n //= 10",
      "    return s",
      "",
      "a, b = map(int, input().split())",
      "max_sum = -1",
      "result = -1",
      "for i in range(a, b + 1):",
      "    if is_prime(i):",
      "        s = digit_sum(i)",
      "        if s > max_sum or (s == max_sum and i > result):",
      "            max_sum = s",
      "            result = i",
      "print(result)"
    ],
    "id": "Tìm số nguyên tố có tổng các chữ số là lớn nhất trong đoạn [a, b]",
    "input_sample": [
      "10 30"
    ],
    "output_sample": [
      "29"
    ],
    "point": "210",
    "short_name": "MAXPRIMESUM"
  },
  {
    "code_sample": [
      "def is_all_vowel(word):",
      "    for c in word:",
      "        if c not in 'aeiouAEIOU':",
      "            return False",
      "    return True",
      "",
      "s = input().split()",
      "count = 0",
      "for word in s:",
      "    if is_all_vowel(word):",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ chứa tất cả các ký tự là nguyên âm",
    "input_sample": [
      "ai ue o eou aeiou xzy aouei"
    ],
    "output_sample": [
      "3"
    ],
    "point": "180",
    "short_name": "VOWELWORD"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "count = 0",
      "for w in words:",
      "    seen = set()",
      "    duplicated = False",
      "    for c in w:",
      "        if c in seen:",
      "            duplicated = True",
      "            break",
      "        seen.add(c)",
      "    if duplicated:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Đếm số lượng từ chứa ít nhất một ký tự lặp lại",
    "input_sample": [
      "hello world apple banana dog cat"
    ],
    "output_sample": [
      "3"
    ],
    "point": "110",
    "short_name": "DUPCHAR"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_len = -1",
      "result = ''",
      "for w in words:",
      "    seen = set()",
      "    duplicated = False",
      "    for c in w:",
      "        if c in seen:",
      "            duplicated = True",
      "            break",
      "        seen.add(c)",
      "    if not duplicated and len(w) > max_len:",
      "        max_len = len(w)",
      "        result = w",
      "print(result)"
    ],
    "id": "Tìm từ dài nhất mà không chứa ký tự lặp lại",
    "input_sample": [
      "hello world banana python dog zoo"
    ],
    "output_sample": [
      "python"
    ],
    "point": "110",
    "short_name": "UNIQUEWORD"
  },
  {
    "code_sample": [
      "k = int(input())",
      "s = input()",
      "n = len(s)",
      "min_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if total % k == 0:",
      "            if min_sum == -1 or total < min_sum:",
      "                min_sum = total",
      "print(min_sum)"
    ],
    "id": "Tìm xâu con có tổng giá trị ASCII chia hết cho k nhỏ nhất Input:",
    "input_sample": [
      "5",
      "abcde"
    ],
    "output_sample": [
      "300"
    ],
    "point": "170",
    "short_name": "MINASCIISUB"
  },
  {
    "code_sample": [
      "k = int(input())",
      "s = input()",
      "n = len(s)",
      "max_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if (j - i + 1) % 2 == 1 and total % k == 0:",
      "            if total > max_sum:",
      "                max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm xâu con có tổng giá trị ASCII chia hết cho k và độ dài lẻ",
    "input_sample": [
      "4",
      "abcde"
    ],
    "output_sample": [
      "405"
    ],
    "point": "190",
    "short_name": "ODDASCIISUB"
  },
  {
    "code_sample": [
      "k = int(input())",
      "s = input()",
      "n = len(s)",
      "max_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    chars = set()",
      "    for j in range(i, n):",
      "        if s[j] in chars:",
      "            break",
      "        chars.add(s[j])",
      "        total += ord(s[j])",
      "        if total % k == 0:",
      "            if total > max_sum:",
      "                max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm xâu con có tổng giá trị ASCII chia hết cho k nhưng không có ký tự nào trùng lặp",
    "input_sample": [
      "5",
      "abcadef"
    ],
    "output_sample": [
      "495"
    ],
    "point": "210",
    "short_name": "UNIQASCIIS"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "counts = {}",
      "for w in words:",
      "    if w in counts:",
      "        counts[w] += 1",
      "    else:",
      "        counts[w] = 1",
      "max_word = ''",
      "max_count = 0",
      "for w in counts:",
      "    if counts[w] > max_count:",
      "        max_word = w",
      "        max_count = counts[w]",
      "print(max_word)",
      "print(max_count)"
    ],
    "id": "Tìm từ xuất hiện nhiều nhất trong văn bản",
    "input_sample": [
      "hoc sinh gioi hoc sinh kha hoc sinh"
    ],
    "output_sample": [
      "hoc",
      "3"
    ],
    "point": "170",
    "short_name": "MAXWORDCNT"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "counts = {}",
      "for w in words:",
      "    if w in counts:",
      "        counts[w] += 1",
      "    else:",
      "        counts[w] = 1",
      "items = list(counts.items())",
      "items.sort(key=lambda x: -x[1])",
      "for w, c in items:",
      "    print(w, c)"
    ],
    "id": "Đếm số lần xuất hiện của các từ trong một văn bản và sắp xếp theo thứ tự giảm dần",
    "input_sample": [
      "hoc sinh gioi hoc sinh kha hoc sinh"
    ],
    "output_sample": [
      "hoc 3",
      "sinh 3",
      "gioi 1",
      "kha 1"
    ],
    "point": "200",
    "short_name": "WORDCOUNT"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "max_len = -1",
      "long_word = ''",
      "for w in words:",
      "    if len(w) > max_len:",
      "        max_len = len(w)",
      "        long_word = w",
      "count = 0",
      "for w in words:",
      "    if w == long_word:",
      "        count += 1",
      "print(long_word, count)"
    ],
    "id": "Tìm từ dài nhất trong văn bản và số lần xuất hiện của nó",
    "input_sample": [
      "hoc sinh gioi hoc sinh kha hoc sinh"
    ],
    "output_sample": [
      "sinh 3"
    ],
    "point": "180",
    "short_name": "LONGWORD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_sum = arr[0]",
      "current_sum = arr[0]",
      "for i in range(1, n):",
      "    current_sum = min(arr[i], current_sum + arr[i])",
      "    if current_sum < min_sum:",
      "        min_sum = current_sum",
      "print(min_sum)"
    ],
    "id": "Tìm dãy ngày có tổng doanh thu thấp nhất",
    "input_sample": [
      "5",
      "3 -2 4 -1 -2"
    ],
    "output_sample": [
      "-3"
    ],
    "point": "160",
    "short_name": "MINREVENUE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "current_sum = 0",
      "for x in arr:",
      "    if x >= 0:",
      "        current_sum += x",
      "        if current_sum > max_sum:",
      "            max_sum = current_sum",
      "    else:",
      "        current_sum = 0",
      "print(max_sum)"
    ],
    "id": "Tìm dãy ngày có tổng doanh thu lớn nhất mà không có ngày âm",
    "input_sample": [
      "7",
      "2 3 -1 4 5 -2 6"
    ],
    "output_sample": [
      "9"
    ],
    "point": "140",
    "short_name": "MAXREVENUE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_sum = 0",
      "for i in range(n - 29):",
      "    total = 0",
      "    for j in range(i, i + 30):",
      "        total += arr[j]",
      "    if total > max_sum:",
      "        max_sum = total",
      "print(max_sum)"
    ],
    "id": "Tìm dãy ngày có tổng doanh thu lớn nhất trong tháng, biết rằng tháng đó có 30 ngày",
    "input_sample": [
      "35",
      "1 2 3 4 5 6 7 8 9 10 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    ],
    "output_sample": [
      "165"
    ],
    "point": "130",
    "short_name": "MAX30DAY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "freq = {}",
      "for x in arr:",
      "    if x in freq:",
      "        freq[x] += 1",
      "    else:",
      "        freq[x] = 1",
      "min_count = n",
      "min_group = 0",
      "for k in freq:",
      "    if freq[k] < min_count:",
      "        min_count = freq[k]",
      "        min_group = k",
      "print(min_group)",
      "print(min_count)"
    ],
    "id": "Tìm nhóm có số lượng học sinh ít nhất",
    "input_sample": [
      "10",
      "5 5 6 6 6 7 7 7 8 9"
    ],
    "output_sample": [
      "8",
      "1"
    ],
    "point": "130",
    "short_name": "MINGROUP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "group = {}",
      "for x in arr:",
      "    if x in group:",
      "        group[x].append(x)",
      "    else:",
      "        group[x] = [x]",
      "max_avg = -1",
      "max_group = 0",
      "for k in group:",
      "    s = sum(group[k])",
      "    l = len(group[k])",
      "    avg = s / l",
      "    if avg > max_avg:",
      "        max_avg = avg",
      "        max_group = k",
      "print(max_group)",
      "print(max_avg)"
    ],
    "id": "Phân loại học sinh và in ra nhóm có điểm trung bình cao nhất",
    "input_sample": [
      "10",
      "5 5 6 6 6 7 7 7 8 8"
    ],
    "output_sample": [
      "8",
      "8.0"
    ],
    "point": "150",
    "short_name": "MAXGROUP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "group = {}",
      "for x in arr:",
      "    if x in group:",
      "        group[x] += 1",
      "    else:",
      "        group[x] = 1",
      "max_count = -1",
      "group_id = 0",
      "for k in group:",
      "    if group[k] > max_count:",
      "        max_count = group[k]",
      "        group_id = k",
      "print(group_id)",
      "print(max_count)"
    ],
    "id": "Tìm nhóm có số lượng học sinh lớn nhất và in ra số lượng học sinh trong nhóm đó",
    "input_sample": [
      "10",
      "5 5 6 6 6 7 7 7 8 8"
    ],
    "output_sample": [
      "6",
      "3"
    ],
    "point": "150",
    "short_name": "MAXGROUPS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = []",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    age = int(parts[1])",
      "    salary = int(parts[2])",
      "    arr.append((age, salary, name))",
      "arr.sort()",
      "for item in arr:",
      "    print(item[2], item[0], item[1])"
    ],
    "id": "Sắp xếp nhân viên theo tên trong trường hợp cùng tuổi và cùng lương",
    "input_sample": [
      "4",
      "An 30 5000",
      "Binh 30 4000",
      "Cuong 30 5000",
      "Duy 29 6000"
    ],
    "output_sample": [
      "Duy 29 6000",
      "Binh 30 4000",
      "An 30 5000",
      "Cuong 30 5000"
    ],
    "point": "200",
    "short_name": "SORTEMPLY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "data = []",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    age = int(parts[1])",
      "    salary = int(parts[2])",
      "    data.append((name, age, salary))",
      "target_age = int(input())",
      "max_salary = -1",
      "result = ''",
      "for person in data:",
      "    if person[1] == target_age and person[2] > max_salary:",
      "        max_salary = person[2]",
      "        result = person",
      "print(result[0], result[1], result[2])"
    ],
    "id": "Tìm nhân viên có lương cao nhất trong nhóm tuổi cụ thể",
    "input_sample": [
      "4",
      "An 30 5000",
      "Binh 30 7000",
      "Cuong 29 8000",
      "Duy 30 6000",
      "30"
    ],
    "output_sample": [
      "Binh 30 7000"
    ],
    "point": "210",
    "short_name": "TOPSALAGE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "data = []",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    age = int(parts[1])",
      "    salary = int(parts[2])",
      "    data.append((age, salary))",
      "sums = {}",
      "for age, salary in data:",
      "    if age not in sums:",
      "        sums[age] = 0",
      "    sums[age] += salary",
      "max_age = -1",
      "max_sum = -1",
      "for age in sums:",
      "    if sums[age] > max_sum:",
      "        max_sum = sums[age]",
      "        max_age = age",
      "print(max_age, max_sum)"
    ],
    "id": "Tìm nhóm tuổi có tổng lương cao nhất và in ra tổng lương của nhóm đó",
    "input_sample": [
      "5",
      "An 30 5000",
      "Binh 30 7000",
      "Cuong 29 8000",
      "Duy 30 6000",
      "Em 29 1000"
    ],
    "output_sample": [
      "30 18000"
    ],
    "point": "220",
    "short_name": "TOPAGEPAY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_sum = float('inf')",
      "week = -1",
      "for i in range(0, n - 6):",
      "    s = sum(arr[i:i+7])",
      "    if s < min_sum:",
      "        min_sum = s",
      "        week = i // 7 + 1",
      "print(week, min_sum)"
    ],
    "id": "Tìm tuần có doanh thu thấp nhất",
    "input_sample": [
      "14",
      "5 3 4 6 8 2 7 9 4 3 2 1 6 7"
    ],
    "output_sample": [
      "2 22"
    ],
    "point": "220",
    "short_name": "LOWWEEK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "half = n // 2",
      "sum_first = sum(arr[:half])",
      "sum_last = sum(arr[-half:])",
      "print(sum_first, sum_last)"
    ],
    "id": "Tìm tổng doanh thu của nửa tháng đầu tiên và nửa tháng cuối cùng",
    "input_sample": [
      "30",
      "1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30"
    ],
    "output_sample": [
      "120 390"
    ],
    "point": "180",
    "short_name": "HALFMONTH"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "weeks = []",
      "for i in range(0, n, 7):",
      "    week = arr[i:i+7]",
      "    avg = sum(week) / len(week)",
      "    weeks.append(avg)",
      "max_increase = -1",
      "week_index = -1",
      "for i in range(1, len(weeks)):",
      "    prev = weeks[i-1]",
      "    curr = weeks[i]",
      "    if prev > 0:",
      "        increase = (curr - prev) / prev * 100",
      "        if increase > max_increase:",
      "            max_increase = increase",
      "            week_index = i + 1",
      "print(week_index, round(max_increase, 2))"
    ],
    "id": "Phân tích doanh thu trung bình mỗi tuần và tìm tuần có mức tăng trưởng cao nhất so với tuần trước",
    "input_sample": [
      "21",
      "100 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260 270 280 290 300 310"
    ],
    "output_sample": [
      "2 28.57"
    ],
    "point": "220",
    "short_name": "GROWWEEK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_diff = float('inf')",
      "start = 0",
      "end = 0",
      "for i in range(n):",
      "    for j in range(i + 1, n):",
      "        segment = arr[i:j+1]",
      "        diff = max(segment) - min(segment)",
      "        if diff < min_diff:",
      "            min_diff = diff",
      "            start = i + 1",
      "            end = j + 1",
      "print(start, end, min_diff)"
    ],
    "id": "Tìm khoảng thời gian có lượng khách hàng ổn định nhất (không chênh lệch nhiều giữa các giờ)",
    "input_sample": [
      "6",
      "10 12 11 15 14 13"
    ],
    "output_sample": [
      "2 4 4"
    ],
    "point": "200",
    "short_name": "STABLECUS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_val = max(arr)",
      "for i in range(n):",
      "    if arr[i] == max_val:",
      "        print(i + 1, max_val)",
      "        break"
    ],
    "id": "Phân tích lượng khách hàng trong ngày và tìm giờ cao điểm (giờ có lượng khách hàng cao nhất)",
    "input_sample": [
      "6",
      "10 12 25 20 18 25"
    ],
    "output_sample": [
      "3 25"
    ],
    "point": "120",
    "short_name": "PEAKHOUR"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_len = 0",
      "cur_len = 0",
      "cur_sum = 0",
      "max_sum = 0",
      "for x in arr:",
      "    if x < k:",
      "        cur_len += 1",
      "        cur_sum += x",
      "        if cur_len > max_len:",
      "            max_len = cur_len",
      "            max_sum = cur_sum",
      "        elif cur_len == max_len and cur_sum > max_sum:",
      "            max_sum = cur_sum",
      "    else:",
      "        cur_len = 0",
      "        cur_sum = 0",
      "print(max_len, max_sum)"
    ],
    "id": "Tìm khoảng thời gian liên tiếp dài nhất có lượng khách hàng dưới một ngưỡng cho trước",
    "input_sample": [
      "10 20",
      "15 18 22 10 12 19 25 17 16 30"
    ],
    "output_sample": [
      "4 59"
    ],
    "point": "150",
    "short_name": "LOWRANGE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_sell = max(arr)",
      "print(max_sell)"
    ],
    "id": "Tìm sản phẩm bán chạy nhất trong tuần (giả sử tuần có 7 ngày)",
    "input_sample": [
      "5",
      "10 20 15 20 5"
    ],
    "output_sample": [
      "20"
    ],
    "point": "100",
    "short_name": "MAXSELL"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "arr = list(map(int, input().split()))",
      "max_val = -1",
      "for val in arr:",
      "    if val >= k and val > max_val:",
      "        max_val = val",
      "print(max_val)"
    ],
    "id": "Tìm sản phẩm bán chạy nhất trong tháng với điều kiện có ít nhất k sản phẩm được bán Input:",
    "input_sample": [
      "6 10",
      "5 15 9 20 10 8"
    ],
    "output_sample": [
      "20"
    ],
    "point": "110",
    "short_name": "MAXKSELL"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "max_val = max(arr)",
      "min_val = min(arr)",
      "print(max_val - min_val)"
    ],
    "id": "So sánh doanh thu của sản phẩm bán chạy nhất với sản phẩm bán ít nhất",
    "input_sample": [
      "5",
      "20 35 15 40 25"
    ],
    "output_sample": [
      "25"
    ],
    "point": "90",
    "short_name": "SALESDIFF"
  },
  {
    "code_sample": [
      "n, m, k = map(int, input().split())",
      "materials = list(map(int, input().split()))",
      "outputs = list(map(int, input().split()))",
      "items = []",
      "for i in range(n):",
      "    max_units = min(m // materials[i], outputs[i])",
      "    items.append((max_units, materials[i], outputs[i]))",
      "items.sort(reverse=True)",
      "total = 0",
      "count = 0",
      "for units, need, out in items:",
      "    if count >= k:",
      "        break",
      "    can_make = min(units, k - count)",
      "    total += can_make",
      "    m -= can_make * need",
      "    count += can_make",
      "print(total)"
    ],
    "id": "Tìm phương án sản xuất tối ưu khi thêm một giới hạn về số lượng sản phẩm có thể sản xuất",
    "input_sample": [
      "4 100 2",
      "40 30 50 20",
      "3 4 2 5"
    ],
    "output_sample": [
      "9"
    ],
    "point": "150",
    "short_name": "MAXLIMIT"
  },
  {
    "code_sample": [
      "def max_output(n, m, need, out):",
      "    items = []",
      "    for i in range(n):",
      "        max_units = min(m // need[i], out[i])",
      "        items.append((max_units, need[i]))",
      "    items.sort(reverse=True)",
      "    total = 0",
      "    for units, used in items:",
      "        make = min(units, m // used)",
      "        total += make",
      "        m -= make * used",
      "    return total",
      "",
      "n, m1, m2 = map(int, input().split())",
      "need = list(map(int, input().split()))",
      "out = list(map(int, input().split()))",
      "res1 = max_output(n, m1, need, out)",
      "res2 = max_output(n, m2, need, out)",
      "print(res1, res2)"
    ],
    "id": "So sánh sản lượng tối ưu trong hai tình huống giới hạn nguyên vật liệu khác nhau",
    "input_sample": [
      "3 100 120",
      "40 50 60",
      "3 4 2"
    ],
    "output_sample": [
      "5 6"
    ],
    "point": "160",
    "short_name": "CMPPROD"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = list(map(int, input().split()))",
      "min_time = min(arr)",
      "max_time = max(arr)",
      "print(max_time - min_time)"
    ],
    "id": "Tìm phiên truy cập ngắn nhất và dài nhất, sau đó tính khoảng cách thời gian giữa chúng",
    "input_sample": [
      "5",
      "10 30 20 50 40"
    ],
    "output_sample": [
      "40"
    ],
    "point": "100",
    "short_name": "MINMAXACC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "start_times = []",
      "end_times = []",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    start_times.append(start)",
      "    end_times.append(end)",
      "print(min(start_times))",
      "print(max(end_times))"
    ],
    "id": "Xác định phiên truy cập bắt đầu sớm nhất và kết thúc muộn nhất",
    "input_sample": [
      "3",
      "10 20",
      "5 25",
      "15 30"
    ],
    "output_sample": [
      "5",
      "30"
    ],
    "point": "100",
    "short_name": "EARLATEACC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "l, r = map(int, input().split())",
      "total = 0",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    if l <= start <= r:",
      "        total += end - start",
      "print(total)"
    ],
    "id": "Tính tổng thời gian truy cập của những phiên bắt đầu trong khoảng thời gian nhất định",
    "input_sample": [
      "3",
      "5 15",
      "5 20",
      "10 30",
      "20 40"
    ],
    "output_sample": [
      "35"
    ],
    "point": "120",
    "short_name": "SUMACCINTV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = float('inf')",
      "max_cost = -1",
      "for _ in range(n):",
      "    quantity, cost = map(int, input().split())",
      "    total_cost = quantity * cost",
      "    if total_cost < min_cost:",
      "        min_cost = total_cost",
      "    if total_cost > max_cost:",
      "        max_cost = total_cost",
      "print(max_cost - min_cost)"
    ],
    "id": "Tìm sản phẩm có chi phí sản xuất thấp nhất và cao nhất, sau đó tính chênh lệch chi phí",
    "input_sample": [
      "3",
      "10 100",
      "5 200",
      "8 50"
    ],
    "output_sample": [
      "150"
    ],
    "point": "100",
    "short_name": "CHIPHISX"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_cost = 0",
      "total_quantity = 0",
      "for _ in range(n):",
      "    quantity, cost = map(int, input().split())",
      "    total_cost += quantity * cost",
      "    total_quantity += quantity",
      "average = total_cost / total_quantity",
      "print(round(average, 1))"
    ],
    "id": "Tính chi phí sản xuất trung bình cho tất cả các sản phẩm",
    "input_sample": [
      "3",
      "10 100",
      "5 200",
      "8 50"
    ],
    "output_sample": [
      "108.0"
    ],
    "point": "100",
    "short_name": "CHIPHIAVG"
  },
  {
    "code_sample": [
      "n, f = map(int, input().split())",
      "total = 0",
      "for _ in range(n):",
      "    quantity, cost = map(int, input().split())",
      "    total += quantity * (cost + f)",
      "print(total)"
    ],
    "id": "Tính tổng chi phí sản xuất khi thêm một khoản chi phí cố định cho mỗi sản phẩm Input:",
    "input_sample": [
      "3 10",
      "5 100",
      "3 200",
      "2 150"
    ],
    "output_sample": [
      "2260"
    ],
    "point": "100",
    "short_name": "CHIPHIFIX"
  },
  {
    "code_sample": [
      "n = int(input())",
      "rain = []",
      "for _ in range(n):",
      "    rain.append(int(input()))",
      "min_rain = min(rain)",
      "day = rain.index(min_rain) + 1",
      "print(day)",
      "print(min_rain)"
    ],
    "id": "Tìm khoảng thời gian có lượng mưa thấp nhất",
    "input_sample": [
      "5",
      "10",
      "5",
      "3",
      "8",
      "6"
    ],
    "output_sample": [
      "3",
      "3"
    ],
    "point": "100",
    "short_name": "MINRAIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "rain = []",
      "for _ in range(n):",
      "    rain.append(int(input()))",
      "avg = sum(rain[-3:]) // 3",
      "for _ in range(3):",
      "    print(avg)"
    ],
    "id": "Dự đoán lượng mưa trong 3 ngày tiếp theo dựa trên lượng mưa trung bình của 3 ngày gần nhất",
    "input_sample": [
      "6",
      "10",
      "12",
      "14",
      "13",
      "11",
      "9"
    ],
    "output_sample": [
      "11",
      "11",
      "11"
    ],
    "point": "100",
    "short_name": "PREDRAIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "rain = []",
      "for _ in range(n):",
      "    rain.append(int(input()))",
      "max_diff = 0",
      "day = 1",
      "for i in range(n - 1):",
      "    diff = abs(rain[i + 1] - rain[i])",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        day = i + 1",
      "print(day)",
      "print(max_diff)"
    ],
    "id": "So sánh lượng mưa trong hai khoảng thời gian liên tiếp và tìm khoảng thời gian có sự thay đổi lớn nhất",
    "input_sample": [
      "7",
      "10",
      "20",
      "15",
      "25",
      "5",
      "30",
      "12"
    ],
    "output_sample": [
      "4",
      "20"
    ],
    "point": "100",
    "short_name": "RAINCHG"
  },
  {
    "code_sample": [
      "n, h = map(int, input().split())",
      "min_hours = []",
      "max_hours = []",
      "for _ in range(n):",
      "    a, b = map(int, input().split())",
      "    min_hours.append(a)",
      "    max_hours.append(b)",
      "total_min = sum(min_hours)",
      "total_max = sum(max_hours)",
      "if h < total_min or h > total_max:",
      "    print('NO')",
      "else:",
      "    res = min_hours[:]",
      "    remain = h - total_min",
      "    for i in range(n):",
      "        extra = min(remain, max_hours[i] - min_hours[i])",
      "        res[i] += extra",
      "        remain -= extra",
      "    print('YES')",
      "    print(' '.join(map(str, res)))"
    ],
    "id": "Tìm lịch làm việc tối ưu sao cho tổng số giờ làm việc không vượt quá một giới hạn cho trước Input:",
    "input_sample": [
      "3 20",
      "5 8",
      "4 7",
      "3 6"
    ],
    "output_sample": [
      "YES",
      "8 7 5"
    ],
    "point": "140",
    "short_name": "OPTWORK"
  },
  {
    "code_sample": [
      "s = input()",
      "tong = 0",
      "dem = 0",
      "for c in s:",
      "    if c.isdigit():",
      "        so = int(c)",
      "        if so % 2 == 0:",
      "            tong += so",
      "    elif not c.isalpha():",
      "        dem += 1",
      "print(tong)",
      "print(dem)"
    ],
    "id": "Tính tổng các chữ số chẵn và số lượng ký tự đặc biệt",
    "input_sample": [
      "abc2#4d@8"
    ],
    "output_sample": [
      "14",
      "2"
    ],
    "point": "160",
    "short_name": "CHUSO_KTDB"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "min_sum = None",
      "cur_sum = 0",
      "inside = False",
      "for x in a:",
      "    if x >= 0:",
      "        if not inside:",
      "            cur_sum = x",
      "            inside = True",
      "        else:",
      "            cur_sum += x",
      "    else:",
      "        if inside:",
      "            if min_sum is None or cur_sum < min_sum:",
      "                min_sum = cur_sum",
      "            inside = False",
      "if inside:",
      "    if min_sum is None or cur_sum < min_sum:",
      "        min_sum = cur_sum",
      "print(min_sum if min_sum is not None else 0)"
    ],
    "id": "Tìm dãy con liên tiếp có tổng nhỏ nhất với các phần tử liên tiếp nhau không âm",
    "input_sample": [
      "10",
      "3 -2 4 0 1 -5 2 3 0 -1"
    ],
    "output_sample": [
      "0"
    ],
    "point": "160",
    "short_name": "TONGCONMIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "a = list(map(int, input().split()))",
      "giam = True",
      "for i in range(1, n):",
      "    if a[i] > a[i - 1]:",
      "        giam = False",
      "        break",
      "if giam:",
      "    print(\"YES\")",
      "else:",
      "    print(\"NO\")"
    ],
    "id": "Kiểm tra danh sách giảm dần",
    "input_sample": [
      "5",
      "100 90 70 50 30"
    ],
    "output_sample": [
      "YES"
    ],
    "point": "120",
    "short_name": "GIAMDAN"
  },
  {
    "code_sample": [
      "s = input()",
      "max_len = 0",
      "res = ''",
      "n = len(s)",
      "for i in range(n):",
      "    l = i",
      "    r = i",
      "    while l >= 0 and r < n and s[l] == s[r]:",
      "        if (r - l + 1) % 2 == 1 and (r - l + 1) > max_len:",
      "            max_len = r - l + 1",
      "            res = s[l:r+1]",
      "        l -= 1",
      "        r += 1",
      "print(res)"
    ],
    "id": "Tìm chuỗi con là số nhị phân đối xứng có độ dài lẻ lớn nhất",
    "input_sample": [
      "1011101001"
    ],
    "output_sample": [
      "01110"
    ],
    "point": "170",
    "short_name": "DOIXUNGBIN"
  },
  {
    "code_sample": [
      "s = input()",
      "max_sub = ''",
      "cur_sub = s[0]",
      "for i in range(1, len(s)):",
      "    if s[i] <= s[i - 1]:",
      "        cur_sub += s[i]",
      "    else:",
      "        if len(cur_sub) > len(max_sub):",
      "            max_sub = cur_sub",
      "        cur_sub = s[i]",
      "if len(cur_sub) > len(max_sub):",
      "    max_sub = cur_sub",
      "print(max_sub)"
    ],
    "id": "Tìm chuỗi con dài nhất có các ký tự theo thứ tự giảm dần",
    "input_sample": [
      "abcdcbaqponmlkj"
    ],
    "output_sample": [
      "qponmlkj"
    ],
    "point": "160",
    "short_name": "GIAMDANCHU"
  },
  {
    "code_sample": [
      "s = input()",
      "words = s.split()",
      "vowels = set('aeiou')",
      "res = ''",
      "for word in words:",
      "    if set(word).issubset(vowels):",
      "        if len(word) > len(res):",
      "            res = word",
      "print(res)"
    ],
    "id": "Tìm từ dài nhất có chứa tất cả các ký tự là nguyên âm",
    "input_sample": [
      "hello aiueo aeiouaeiou aei bcdeu"
    ],
    "output_sample": [
      "aeiouaeiou"
    ],
    "point": "150",
    "short_name": "TUDAINGUY"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n**0.5)+1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "max_len = 0",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        if is_prime(a[j]):",
      "            break",
      "        total += a[j]",
      "        if total % k == 0:",
      "            max_len = max(max_len, j - i + 1)",
      "print(max_len)"
    ],
    "id": "Tìm dãy con không chứa số nguyên tố dài nhất mà có tổng các phần tử chia hết cho k",
    "input_sample": [
      "10 5",
      "4 6 8 3 10 12 15 16 17 18"
    ],
    "output_sample": [
      "4"
    ],
    "point": "240",
    "short_name": "SUBKNONPRI"
  },
  {
    "code_sample": [
      "def is_prime(n):",
      "    if n < 2:",
      "        return False",
      "    for i in range(2, int(n**0.5)+1):",
      "        if n % i == 0:",
      "            return False",
      "    return True",
      "",
      "s = input()",
      "n = len(s)",
      "min_prime = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if is_prime(total):",
      "            if min_prime == -1 or total < min_prime:",
      "                min_prime = total",
      "print(min_prime)"
    ],
    "id": "Tìm chuỗi con có tổng giá trị ASCII là số nguyên tố nhỏ nhất",
    "input_sample": [
      "abcde"
    ],
    "output_sample": [
      "313"
    ],
    "point": "250",
    "short_name": "ASCIIPRIME"
  },
  {
    "code_sample": [
      "k = int(input())",
      "s = input()",
      "n = len(s)",
      "min_sum = -1",
      "for i in range(n):",
      "    total = 0",
      "    for j in range(i, n):",
      "        total += ord(s[j])",
      "        if total % k == 0:",
      "            if min_sum == -1 or total < min_sum:",
      "                min_sum = total",
      "print(min_sum)"
    ],
    "id": "Tìm xâu con có tổng giá trị ASCII chia hết cho k nhỏ nhất",
    "input_sample": [
      "5",
      "abcde"
    ],
    "output_sample": [
      "300"
    ],
    "point": "250",
    "short_name": "ASCIIMODK"
  },
  {
    "code_sample": [
      "n, k = map(int, input().split())",
      "a = list(map(int, input().split()))",
      "max_val = -1",
      "for x in a:",
      "    if x >= k and x > max_val:",
      "        max_val = x",
      "print(max_val)"
    ],
    "id": "Tìm sản phẩm bán chạy nhất trong tháng với điều kiện có ít nhất k sản phẩm được bán",
    "input_sample": [
      "5 3",
      "0 10 3 5 8"
    ],
    "output_sample": [
      "10"
    ],
    "point": "190",
    "short_name": "BESTPROD"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "materials = list(map(int, input().split()))",
      "outputs = list(map(int, input().split()))",
      "max_output = 0",
      "for i in range(n):",
      "    if materials[i] <= m:",
      "        max_output = max(max_output, outputs[i])",
      "print(max_output)"
    ],
    "id": "Tìm sản lượng tối đa có thể đạt được với một loại sản phẩm nhất định trong trường hợp giới hạn nguyên vật liệu thay đổi",
    "input_sample": [
      "5 15",
      "3 5 2 6 4",
      "10 20 5 12 8"
    ],
    "output_sample": [
      "20"
    ],
    "point": "200",
    "short_name": "MAXYIELD"
  },
  {
    "code_sample": [
      "n, f = map(int, input().split())",
      "total = 0",
      "for _ in range(n):",
      "    qty, unit_cost = map(int, input().split())",
      "    total += qty * (unit_cost + f)",
      "print(total)"
    ],
    "id": "Tính tổng chi phí sản xuất khi thêm một khoản chi phí cố định cho mỗi sản phẩm",
    "input_sample": [
      "3 100",
      "5 200",
      "3 150",
      "2 300"
    ],
    "output_sample": [
      "2800"
    ],
    "point": "170",
    "short_name": "TOTALCOST"
  },
  {
    "code_sample": [
      "n, h = map(int, input().split())",
      "days = []",
      "for _ in range(n):",
      "    a, b = map(int, input().split())",
      "    days.append([a, b])",
      "total = sum(day[0] for day in days)",
      "res = [day[0] for day in days]",
      "extra = h - total",
      "for i in range(n):",
      "    add = min(extra, days[i][1] - days[i][0])",
      "    res[i] += add",
      "    extra -= add",
      "print(' '.join(map(str, res)))"
    ],
    "id": "Tìm lịch làm việc tối ưu sao cho tổng số giờ làm việc không vượt quá một giới hạn cho trước",
    "input_sample": [
      "3 18",
      "4 8",
      "5 6",
      "3 5"
    ],
    "output_sample": [
      "4 6 5"
    ],
    "point": "210",
    "short_name": "OPTWORK"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "days = []",
      "for _ in range(n):",
      "    a, b = map(int, input().split())",
      "    days.append([a, b])",
      "selected = days[:m]",
      "res = [day[1] for day in selected]",
      "print(' '.join(map(str, res)))"
    ],
    "id": "Tìm lịch làm việc tối ưu khi nhân viên chỉ có thể làm việc vào một số ngày nhất định trong tuần",
    "input_sample": [
      "5 3",
      "3 5",
      "2 4",
      "1 3",
      "4 6",
      "2 5"
    ],
    "output_sample": [
      "5 4 5"
    ],
    "point": "200",
    "short_name": "OPTWDAY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "days = []",
      "for _ in range(n):",
      "    a, b = map(int, input().split())",
      "    days.append([a, b])",
      "res = []",
      "for d in days:",
      "    res.append((d[0] + d[1]) // 2)",
      "print(' '.join(map(str, res)))"
    ],
    "id": "Tối ưu hóa lịch làm việc sao cho khoảng cách giữa ngày làm việc và ngày nghỉ là nhỏ nhất",
    "input_sample": [
      "5",
      "3 5",
      "2 4",
      "1 3",
      "4 6",
      "2 5"
    ],
    "output_sample": [
      "3 3 3 3 3"
    ],
    "point": "190",
    "short_name": "OPTSCHED"
  },
  {
    "code_sample": [
      "n = int(input())",
      "hours = []",
      "for _ in range(n):",
      "    h = int(input())",
      "    hours.append(h)",
      "counter = {}",
      "for h in hours:",
      "    if h in counter:",
      "        counter[h] += 1",
      "    else:",
      "        counter[h] = 1",
      "min_hour = -1",
      "min_count = n + 1",
      "for h in sorted(counter):",
      "    if counter[h] < min_count:",
      "        min_count = counter[h]",
      "        min_hour = h",
      "print(min_hour, min_count)"
    ],
    "id": "Tìm giờ có số lượng đơn hàng thấp nhất và in ra giờ đó cùng số lượng đơn hàng",
    "input_sample": [
      "8",
      "9",
      "10",
      "10",
      "11",
      "12",
      "10",
      "11",
      "12"
    ],
    "output_sample": [
      "9 1"
    ],
    "point": "150",
    "short_name": "LOWORDERS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "count = [0] * 25",
      "for t in times:",
      "    count[t] += 1",
      "max_diff = 0",
      "hour = 0",
      "for i in range(1, 25):",
      "    diff = abs(count[i] - count[i - 1])",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        hour = i",
      "print(hour)",
      "print(max_diff)"
    ],
    "id": "Phân tích sự thay đổi số lượng đơn hàng giữa các giờ liên tiếp và tìm giờ có sự thay đổi lớn nhất",
    "input_sample": [
      "10",
      "8",
      "9",
      "9",
      "10",
      "10",
      "11",
      "11",
      "12",
      "14",
      "14"
    ],
    "output_sample": [
      "12",
      "2"
    ],
    "point": "180",
    "short_name": "ORDERDIFF"
  },
  {
    "code_sample": [
      "n = int(input())",
      "distances = []",
      "for _ in range(n):",
      "    distances.append(int(input()))",
      "distances.sort(reverse=True)",
      "total = 0",
      "for d in distances:",
      "    total += d",
      "print(total)"
    ],
    "id": "Tính tổng khoảng cách giao hàng khi ưu tiên giao những điểm có khoảng cách xa nhất trước",
    "input_sample": [
      "5",
      "3",
      "7",
      "2",
      "9",
      "5"
    ],
    "output_sample": [
      "26"
    ],
    "point": "140",
    "short_name": "MAXDIST"
  },
  {
    "code_sample": [
      "n = int(input())",
      "distances = []",
      "for _ in range(n):",
      "    distances.append(int(input()))",
      "avg = sum(distances) / n",
      "min_diff = abs(distances[0] - avg)",
      "pos = 1",
      "for i in range(1, n):",
      "    diff = abs(distances[i] - avg)",
      "    if diff < min_diff:",
      "        min_diff = diff",
      "        pos = i + 1",
      "print(pos)",
      "print(distances[pos - 1])"
    ],
    "id": "Phân tích khoảng cách giao hàng và tìm điểm giao hàng tối ưu (có khoảng cách trung bình so với các điểm khác)",
    "input_sample": [
      "5",
      "3",
      "7",
      "2",
      "9",
      "5"
    ],
    "output_sample": [
      "4",
      "5"
    ],
    "point": "150",
    "short_name": "AVGDELIV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "times.sort()",
      "total_time = sum(times)",
      "print(total_time)"
    ],
    "id": "Tối ưu hóa lộ trình giao hàng sao cho tổng thời gian di chuyển là ngắn nhất",
    "input_sample": [
      "5",
      "4",
      "2",
      "7",
      "1",
      "3"
    ],
    "output_sample": [
      "17"
    ],
    "point": "130",
    "short_name": "MINROUTE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "customers = []",
      "for _ in range(n):",
      "    customers.append(int(input()))",
      "total = 0",
      "for c in customers:",
      "    for i in range(7):",
      "        total += c",
      "        c = c * 1.1",
      "print(round(total, 1))"
    ],
    "id": "Dự đoán lượng khách hàng cho tuần tới nếu lượng khách hàng tăng đều 10% mỗi ngày",
    "input_sample": [
      "3",
      "100",
      "110",
      "121"
    ],
    "output_sample": [
      "505.1"
    ],
    "point": "170",
    "short_name": "GUESTPRED"
  },
  {
    "code_sample": [
      "n = int(input())",
      "customers = []",
      "for _ in range(n):",
      "    customers.append(int(input()))",
      "total = 0",
      "for c in customers:",
      "    for i in range(7):",
      "        total += c",
      "        c = c * 0.95",
      "print(round(total, 1))"
    ],
    "id": "Dự đoán lượng khách hàng cho tuần tới nếu lượng khách hàng giảm 5% mỗi ngày",
    "input_sample": [
      "3",
      "100",
      "200",
      "300"
    ],
    "output_sample": [
      "1785.4"
    ],
    "point": "170",
    "short_name": "GUESTDROP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "last_week = list(map(int, input().split()))",
      "this_week = list(map(int, input().split()))",
      "sum_last = sum(last_week)",
      "sum_this = sum(this_week)",
      "diff = sum_this - sum_last",
      "if diff > 0:",
      "    print(\"Tuần này\")",
      "    print(diff)",
      "elif diff < 0:",
      "    print(\"Tuần trước\")",
      "    print(-diff)",
      "else:",
      "    print(\"Không thay đổi\")",
      "    print(0)"
    ],
    "id": "So sánh lượng khách hàng dự đoán giữa hai tuần và tìm tuần có lượng khách hàng tăng trưởng lớn nhất",
    "input_sample": [
      "3",
      "100 150 200",
      "120 180 210"
    ],
    "output_sample": [
      "Tuần này",
      "60"
    ],
    "point": "170",
    "short_name": "GROWTHEST"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "limits = []",
      "for _ in range(n):",
      "    low, high = map(int, input().split())",
      "    limits.append([low, high])",
      "result = [low for low, high in limits]",
      "total = sum(result)",
      "remain = m - total",
      "while remain > 0:",
      "    updated = False",
      "    for i in range(n):",
      "        if result[i] < limits[i][1] and remain > 0:",
      "            result[i] += 1",
      "            remain -= 1",
      "            updated = True",
      "    if not updated:",
      "        break",
      "print(' '.join(map(str, result)))"
    ],
    "id": "Phân bổ ngân sách tối ưu sao cho tất cả các kênh đều có mức ngân sách gần bằng nhau nhất",
    "input_sample": [
      "3 100",
      "20 50",
      "10 40",
      "15 60"
    ],
    "output_sample": [
      "34 33 33"
    ],
    "point": "210",
    "short_name": "OPTBUDGET"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "total = 0",
      "for _ in range(n):",
      "    low, high = map(int, input().split())",
      "    total += high",
      "print(total)"
    ],
    "id": "Tìm mức ngân sách tối thiểu để tất cả các kênh đều đạt được mức ngân sách tối đa",
    "input_sample": [
      "3 200",
      "20 50",
      "10 40",
      "30 60"
    ],
    "output_sample": [
      "150"
    ],
    "point": "110",
    "short_name": "MINMAXBUD"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "min_list = []",
      "max_list = []",
      "for _ in range(n):",
      "    low, high = map(int, input().split())",
      "    min_list.append(low)",
      "    max_list.append(high)",
      "remain = m - sum(min_list)",
      "alloc = min_list[:]",
      "for i in range(n):",
      "    can_add = min(remain, max_list[i] - alloc[i])",
      "    alloc[i] += can_add",
      "    remain -= can_add",
      "print(' '.join(map(str, alloc)))"
    ],
    "id": "Tính toán phân bổ ngân sách khi mỗi kênh cần một mức ngân sách cố định và phần còn lại được chia đều",
    "input_sample": [
      "3 200",
      "30 60",
      "40 70",
      "50 80"
    ],
    "output_sample": [
      "60 70 70"
    ],
    "point": "170",
    "short_name": "BUDALLOCA"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = None",
      "for _ in range(n):",
      "    amount, price = map(int, input().split())",
      "    cost = amount * price",
      "    if min_cost is None or cost < min_cost:",
      "        min_cost = cost",
      "print(min_cost)"
    ],
    "id": "Tìm thiết bị tiêu thụ ít nhất và in ra chi phí của thiết bị đó",
    "input_sample": [
      "3",
      "10 500",
      "5 300",
      "8 200"
    ],
    "output_sample": [
      "1500"
    ],
    "point": "130",
    "short_name": "MINDEVICE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    amount, price = map(int, input().split())",
      "    total += amount * price",
      "avg = total / n",
      "print(f'{avg:.2f}')"
    ],
    "id": "Tính chi phí trung bình của tất cả các thiết bị trong nhà",
    "input_sample": [
      "3",
      "10 500",
      "5 300",
      "8 200"
    ],
    "output_sample": [
      "2166.67"
    ],
    "point": "150",
    "short_name": "AVGCOST"
  },
  {
    "code_sample": [
      "n = int(input())",
      "last = list(map(int, input().split()))",
      "current = list(map(int, input().split()))",
      "sum_last = sum(last)",
      "sum_current = sum(current)",
      "diff = sum_current - sum_last",
      "percent = (diff / sum_last) * 100",
      "print(f'{percent:.2f}')"
    ],
    "id": "So sánh chi phí tiêu thụ của tháng này với tháng trước và tính phần trăm chênh lệch",
    "input_sample": [
      "3",
      "100 200 300",
      "150 250 400"
    ],
    "output_sample": [
      "33.33"
    ],
    "point": "150",
    "short_name": "COSTDIFF"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = float('inf')",
      "item_name = ''",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    quantity = int(parts[1])",
      "    unit_price = int(parts[2])",
      "    cost = quantity * unit_price",
      "    if cost < min_cost:",
      "        min_cost = cost",
      "        item_name = name",
      "print(item_name)",
      "print(min_cost)"
    ],
    "id": "Tìm mặt hàng rẻ nhất trong danh sách mua sắm và in ra tên mặt hàng đó",
    "input_sample": [
      "3",
      "Gao 2 12000",
      "Sua 1 10000",
      "Mi 5 2500"
    ],
    "output_sample": [
      "Mi",
      "12500"
    ],
    "point": "170",
    "short_name": "CHEAPITEM"
  },
  {
    "code_sample": [
      "n = int(input())",
      "prices = list(map(int, input().split()))",
      "discounts = list(map(int, input().split()))",
      "total = 0",
      "for i in range(n):",
      "    reduced = prices[i] * (100 - discounts[i]) // 100",
      "    total += reduced",
      "print(total)"
    ],
    "id": "Tính tổng chi phí dự kiến khi giảm giá một số mặt hàng",
    "input_sample": [
      "3",
      "10000 20000 30000",
      "10 20 30"
    ],
    "output_sample": [
      "42000"
    ],
    "point": "170",
    "short_name": "SALECOST"
  },
  {
    "code_sample": [
      "n = int(input())",
      "items = []",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    price = int(parts[1])",
      "    items.append((name, price))",
      "discounts = list(map(int, input().split()))",
      "max_discount = -1",
      "result_name = ''",
      "result_price = 0",
      "for i in range(n):",
      "    if discounts[i] > max_discount:",
      "        max_discount = discounts[i]",
      "        reduced_price = items[i][1] * (100 - discounts[i]) // 100",
      "        result_name = items[i][0]",
      "        result_price = reduced_price",
      "print(result_name, result_price)"
    ],
    "id": "Tìm tên và chi phí của mặt hàng có phần trăm giảm giá cao nhất",
    "input_sample": [
      "3",
      "Ao 100000",
      "Quan 200000",
      "Mu 150000",
      "10 20 15"
    ],
    "output_sample": [
      "Quan 160000"
    ],
    "point": "180",
    "short_name": "MAXDISCNT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_total = 1000",
      "min_name = ''",
      "for _ in range(n):",
      "    parts = input().split()",
      "    name = parts[0]",
      "    scores = list(map(int, parts[1:]))",
      "    total = sum(scores)",
      "    if total < min_total:",
      "        min_total = total",
      "        min_name = name",
      "if min_total >= 40:",
      "    rank = 'Gioi'",
      "elif min_total >= 30:",
      "    rank = 'Kha'",
      "elif min_total >= 20:",
      "    rank = 'Trung binh'",
      "else:",
      "    rank = 'Yeu'",
      "print(min_name, rank)"
    ],
    "id": "Tìm học sinh có tổng điểm thấp nhất và xếp loại học sinh đó",
    "input_sample": [
      "3",
      "An 5 6 7",
      "Binh 4 3 5",
      "Cuong 6 6 5"
    ],
    "output_sample": [
      "Binh Yeu"
    ],
    "point": "180",
    "short_name": "LOWSTUDNT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "count = 0",
      "for _ in range(n):",
      "    parts = input().split()",
      "    scores = list(map(int, parts[1:]))",
      "    total += sum(scores)",
      "    count += len(scores)",
      "avg = total / count",
      "if avg >= 8:",
      "    grade = 'Gioi'",
      "elif avg >= 6.5:",
      "    grade = 'Kha'",
      "elif avg >= 5:",
      "    grade = 'Trung binh'",
      "else:",
      "    grade = 'Yeu'",
      "print(f'{avg:.2f}', grade)"
    ],
    "id": "Tính điểm trung bình của cả lớp và xếp loại theo điểm trung bình",
    "input_sample": [
      "3",
      "An 7 8 9",
      "Binh 6 6 6",
      "Cuong 5 5 5"
    ],
    "output_sample": [
      "6.56 Trung binh"
    ],
    "point": "180",
    "short_name": "AVGCLASS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "hk1 = list(map(int, input().split()))",
      "hk2 = list(map(int, input().split()))",
      "max_diff = -1",
      "index = -1",
      "for i in range(n):",
      "    diff = hk2[i] - hk1[i]",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        index = i",
      "print(index + 1, max_diff)"
    ],
    "id": "So sánh điểm trung bình của hai học kỳ và xác định học sinh có sự tiến bộ lớn nhất",
    "input_sample": [
      "4",
      "5 6 7 8",
      "6 7 9 9"
    ],
    "output_sample": [
      "3 2"
    ],
    "point": "160",
    "short_name": "PROGRESS"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0.0",
      "for _ in range(n):",
      "    income = int(input())",
      "    total += income * 1.05",
      "print(f'{total:.2f}')"
    ],
    "id": "Dự đoán thu nhập cho chu kỳ tiếp theo nếu thu nhập tăng đều 5% mỗi chu kỳ",
    "input_sample": [
      "3",
      "100",
      "200",
      "300"
    ],
    "output_sample": [
      "630.00"
    ],
    "point": "140",
    "short_name": "THUNHAP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0.0",
      "for _ in range(n):",
      "    income = int(input())",
      "    total += income * 0.9",
      "print(f'{total:.2f}')"
    ],
    "id": "Dự đoán thu nhập cho chu kỳ tiếp theo nếu thu nhập giảm 10% mỗi chu kỳ",
    "input_sample": [
      "3",
      "100",
      "200",
      "300"
    ],
    "output_sample": [
      "540.00"
    ],
    "point": "140",
    "short_name": "THUNHAPGI"
  },
  {
    "code_sample": [
      "n = int(input())",
      "arr = []",
      "for _ in range(n):",
      "    arr.append(int(input()))",
      "max_change = -1",
      "cycle = 0",
      "for i in range(1, n):",
      "    diff = abs(arr[i] - arr[i-1])",
      "    if diff > max_change:",
      "        max_change = diff",
      "        cycle = i",
      "print(cycle + 1)",
      "print(max_change)"
    ],
    "id": "So sánh thu nhập giữa hai chu kỳ liên tiếp và xác định chu kỳ có sự thay đổi lớn nhất",
    "input_sample": [
      "5",
      "100",
      "150",
      "90",
      "200",
      "180"
    ],
    "output_sample": [
      "3",
      "110"
    ],
    "point": "150",
    "short_name": "CHUKYMAX"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_time = 0",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    total_time += (end - start)",
      "avg_time = total_time / n",
      "print(avg_time)"
    ],
    "id": "Tính thời gian trung bình mỗi phiên đăng nhập",
    "input_sample": [
      "3",
      "0 30",
      "10 40",
      "20 50"
    ],
    "output_sample": [
      "30.0"
    ],
    "point": "130",
    "short_name": "AVGLOGIN"
  },
  {
    "code_sample": [
      "n = int(input())",
      "timeline = {}",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    for t in range(start, end + 1):",
      "        if t in timeline:",
      "            timeline[t] += 1",
      "        else:",
      "            timeline[t] = 1",
      "max_time = -1",
      "max_users = -1",
      "for t in sorted(timeline):",
      "    if timeline[t] > max_users:",
      "        max_users = timeline[t]",
      "        max_time = t",
      "print(max_time)"
    ],
    "id": "Xác định thời gian mà số người dùng đồng thời nhiều nhất",
    "input_sample": [
      "3",
      "1 5",
      "2 6",
      "4 8"
    ],
    "output_sample": [
      "4"
    ],
    "point": "180",
    "short_name": "MAXONLINE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "l, r = map(int, input().split())",
      "orders = [int(input()) for _ in range(n)]",
      "count = 0",
      "for hour in orders:",
      "    if l <= hour <= r:",
      "        count += 1",
      "print(count)"
    ],
    "id": "Tính tổng số lượng đơn hàng trong khoảng thời gian từ giờ l đến giờ r",
    "input_sample": [
      "8",
      "9 10",
      "9",
      "10",
      "10",
      "11",
      "12",
      "12",
      "12",
      "13"
    ],
    "output_sample": [
      "4"
    ],
    "point": "100",
    "short_name": "ORDSUMLR"
  },
  {
    "code_sample": [
      "n = int(input())",
      "group1 = 0",
      "group2 = 0",
      "for i in range(n):",
      "    start, end = map(int, input().split())",
      "    duration = end - start",
      "    if i % 2 == 0:",
      "        group1 += duration",
      "    else:",
      "        group2 += duration",
      "print(group1)",
      "print(group2)",
      "if group1 > group2:",
      "    print('Nhóm 1')",
      "elif group2 > group1:",
      "    print('Nhóm 2')",
      "else:",
      "    print('Bằng nhau')"
    ],
    "id": "So sánh thời gian sử dụng ứng dụng giữa hai nhóm người dùng khác nhau",
    "input_sample": [
      "4",
      "0 30",
      "10 40",
      "50 100",
      "60 120"
    ],
    "output_sample": [
      "60",
      "110",
      "Nhóm 2"
    ],
    "point": "100",
    "short_name": "COMPTIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "max_time = 0",
      "for _ in range(n):",
      "    time, priority = map(int, input().split())",
      "    if time > max_time:",
      "        max_time = time",
      "print(max_time)"
    ],
    "id": "Tìm công việc có thời gian hoàn thành dài nhất trong danh sách",
    "input_sample": [
      "4",
      "10 2",
      "15 1",
      "7 3",
      "20 2"
    ],
    "output_sample": [
      "20"
    ],
    "point": "60",
    "short_name": "MAXJOBTIME"
  },
  {
    "code_sample": [
      "n, t = map(int, input().split())",
      "total_time = 0",
      "for _ in range(n):",
      "    time, priority = map(int, input().split())",
      "    total_time += time",
      "total_time += t * (n - 1)",
      "print(total_time)"
    ],
    "id": "Tính tổng thời gian hoàn thành công việc khi có thêm một khoản thời gian nghỉ giữa các công việc",
    "input_sample": [
      "3 5",
      "10 1",
      "20 2",
      "15 3"
    ],
    "output_sample": [
      "55"
    ],
    "point": "90",
    "short_name": "TOTTIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_priority = 3",
      "min_time = None",
      "for _ in range(n):",
      "    time, priority = map(int, input().split())",
      "    if priority == min_priority:",
      "        if min_time is None or time < min_time:",
      "            min_time = time",
      "    elif priority > min_priority:",
      "        pass",
      "    else:",
      "        min_priority = priority",
      "        min_time = time",
      "print(min_time)"
    ],
    "id": "Tìm công việc có mức độ ưu tiên thấp nhất và thời gian hoàn thành ngắn nhất",
    "input_sample": [
      "4",
      "10 1",
      "5 3",
      "8 2",
      "6 3"
    ],
    "output_sample": [
      "5"
    ],
    "point": "100",
    "short_name": "MINPRIO"
  },
  {
    "code_sample": [
      "n = int(input())",
      "max_price = -1",
      "max_name = ''",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = ' '.join(line[:-1])",
      "    price = int(line[-1])",
      "    if price > max_price:",
      "        max_price = price",
      "        max_name = name",
      "print(max_name)"
    ],
    "id": "Tìm sản phẩm có giá tiền cao nhất và in ra tên sản phẩm đó",
    "input_sample": [
      "3",
      "Táo 10000",
      "Chuối 12000",
      "Cam 8000"
    ],
    "output_sample": [
      "Chuối"
    ],
    "point": "90",
    "short_name": "MAXPRICE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = ' '.join(line[:-1])",
      "    price = int(line[-1])",
      "    total += int(price * 0.9)",
      "print(total)"
    ],
    "id": "Tính tổng giá trị hàng hóa sau khi giảm giá 10% cho tất cả các sản phẩm",
    "input_sample": [
      "3",
      "Táo 10000",
      "Chuối 12000",
      "Cam 8000"
    ],
    "output_sample": [
      "27000"
    ],
    "point": "90",
    "short_name": "TOTDISCNT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_before = 0",
      "total_after = 0",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = ' '.join(line[:-1])",
      "    price = int(line[-1])",
      "    total_before += price",
      "    total_after += int(price * 0.9)",
      "diff = total_before - total_after",
      "percent = diff / total_before * 100",
      "print(round(percent, 1))"
    ],
    "id": "So sánh giá trị hàng hóa trước và sau khi giảm giá 10% và tính phần trăm chênh lệch",
    "input_sample": [
      "3",
      "Táo 10000",
      "Chuối 12000",
      "Cam 8000"
    ],
    "output_sample": [
      "10.0"
    ],
    "point": "110",
    "short_name": "DISCPERC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "sales = []",
      "for _ in range(n):",
      "    sales.append(int(input()))",
      "last = sales[-1]",
      "next_month = int(last * 1.05)",
      "print(next_month)"
    ],
    "id": "Dự đoán doanh số cho tháng tới nếu doanh số tăng đều 5% mỗi tháng",
    "input_sample": [
      "3",
      "100",
      "105",
      "110"
    ],
    "output_sample": [
      "115"
    ],
    "point": "90",
    "short_name": "SALESINC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "sales = []",
      "for _ in range(n):",
      "    sales.append(int(input()))",
      "last = sales[-1]",
      "next_month = int(last * 0.9)",
      "print(next_month)"
    ],
    "id": "Dự đoán doanh số cho tháng tới nếu doanh số giảm 10% mỗi tháng",
    "input_sample": [
      "3",
      "100",
      "90",
      "81"
    ],
    "output_sample": [
      "72"
    ],
    "point": "90",
    "short_name": "SALESDEC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "sales = []",
      "for _ in range(n):",
      "    sales.append(int(input()))",
      "if sales[-1] > sales[-2]:",
      "    print(n)",
      "    print(sales[-1] - sales[-2])",
      "else:",
      "    print(n - 1)",
      "    print(sales[-2] - sales[-1])"
    ],
    "id": "So sánh doanh số giữa hai tháng gần nhất và xác định tháng có doanh số cao hơn",
    "input_sample": [
      "3",
      "100",
      "120",
      "110"
    ],
    "output_sample": [
      "2",
      "10"
    ],
    "point": "90",
    "short_name": "CMPMONTH"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = None",
      "for _ in range(n):",
      "    qty, cost = map(int, input().split())",
      "    if min_cost is None or cost < min_cost:",
      "        min_cost = cost",
      "print(min_cost)"
    ],
    "id": "Tìm sản phẩm có chi phí sản xuất thấp nhất và in ra chi phí của sản phẩm đó",
    "input_sample": [
      "3",
      "100 50",
      "200 30",
      "150 40"
    ],
    "output_sample": [
      "30"
    ],
    "point": "110",
    "short_name": "MINCOST"
  },
  {
    "code_sample": [
      "n, f = map(int, input().split())",
      "total = 0",
      "for _ in range(n):",
      "    qty, cost = map(int, input().split())",
      "    total += qty * cost + qty * f",
      "print(total)"
    ],
    "id": "Tính tổng chi phí sản xuất khi có thêm một khoản phí cố định cho mỗi sản phẩm",
    "input_sample": [
      "3 100",
      "10 50",
      "20 30",
      "15 40"
    ],
    "output_sample": [
      "7600"
    ],
    "point": "130",
    "short_name": "TOTALCOST"
  },
  {
    "code_sample": [
      "m, n = map(int, input().split())",
      "total_m = 0",
      "for _ in range(m):",
      "    qty, cost = map(int, input().split())",
      "    total_m += qty * cost",
      "total_n = 0",
      "for _ in range(n):",
      "    qty, cost = map(int, input().split())",
      "    total_n += qty * cost",
      "if total_m > total_n:",
      "    print('San pham 1')",
      "    print(total_m - total_n)",
      "elif total_n > total_m:",
      "    print('San pham 2')",
      "    print(total_n - total_m)",
      "else:",
      "    print('Bang nhau')",
      "    print(0)"
    ],
    "id": "So sánh chi phí sản xuất giữa hai sản phẩm và xác định sản phẩm nào tốn kém hơn",
    "input_sample": [
      "2 3",
      "10 50",
      "20 40",
      "15 30"
    ],
    "output_sample": [
      "San pham 2",
      "1100"
    ],
    "point": "110",
    "short_name": "COMPAREC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_time = 0",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    total_time += end - start",
      "avg = total_time / n",
      "print(avg)"
    ],
    "id": "Tính thời gian bay trung bình cho tất cả các chuyến bay trong ngày",
    "input_sample": [
      "3",
      "8 12",
      "14 18",
      "20 23"
    ],
    "output_sample": [
      "3.0"
    ],
    "point": "110",
    "short_name": "AVGFLIGHT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    times.append((start, 'start'))",
      "    times.append((end, 'end'))",
      "times.sort()",
      "current = 0",
      "max_count = 0",
      "max_time = None",
      "for i in range(len(times) - 1):",
      "    if times[i][1] == 'start':",
      "        current += 1",
      "    else:",
      "        current -= 1",
      "    if current > max_count:",
      "        max_count = current",
      "        max_time = (times[i][0], times[i+1][0])",
      "print(max_time[0], max_time[1])",
      "print(max_count)"
    ],
    "id": "Xác định khoảng thời gian trong ngày có nhiều chuyến bay nhất",
    "input_sample": [
      "3",
      "8 12",
      "10 14",
      "11 15"
    ],
    "output_sample": [
      "11 12",
      "3"
    ],
    "point": "130",
    "short_name": "MAXFLIGHT"
  },
  {
    "code_sample": [
      "m, n = map(int, input().split())",
      "duration1 = n - m",
      "p, q = map(int, input().split())",
      "duration2 = q - p",
      "if duration1 > duration2:",
      "    print('Chuyến 1')",
      "    print(duration1 - duration2)",
      "elif duration2 > duration1:",
      "    print('Chuyến 2')",
      "    print(duration2 - duration1)",
      "else:",
      "    print('Bằng nhau')",
      "    print(0)"
    ],
    "id": "So sánh thời gian bay giữa hai chuyến bay và xác định chuyến bay",
    "input_sample": [
      "8 12",
      "10 14"
    ],
    "output_sample": [
      "Chuyến 2",
      "2"
    ],
    "point": "90",
    "short_name": "FLIGHTCMP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    total += int(input())",
      "avg = total // n",
      "print(avg)"
    ],
    "id": "Tính doanh số trung bình hàng tháng trong n tháng",
    "input_sample": [
      "3",
      "1000",
      "2000",
      "3000"
    ],
    "output_sample": [
      "2000"
    ],
    "point": "90",
    "short_name": "AVGSALES"
  },
  {
    "code_sample": [
      "n = int(input())",
      "sales = []",
      "for _ in range(n):",
      "    sales.append(int(input()))",
      "max_diff = -1",
      "month = 0",
      "for i in range(1, n):",
      "    diff = sales[i] - sales[i-1]",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        month = i + 1",
      "print(month)",
      "print(max_diff)"
    ],
    "id": "So sánh doanh số giữa hai tháng liên tiếp và xác định tháng có sự tăng trưởng lớn nhất",
    "input_sample": [
      "5",
      "1000",
      "1200",
      "1500",
      "1300",
      "1700"
    ],
    "output_sample": [
      "5",
      "400"
    ],
    "point": "110",
    "short_name": "MAXGROWTH"
  },
  {
    "code_sample": [
      "n = int(input())",
      "sales = []",
      "for _ in range(n):",
      "    sales.append(int(input()))",
      "min_sales = sales[0]",
      "min_month = 1",
      "for i in range(1, n):",
      "    if sales[i] < min_sales:",
      "        min_sales = sales[i]",
      "        min_month = i + 1",
      "print(min_month)",
      "print(min_sales)"
    ],
    "id": "Xác định tháng có doanh số thấp nhất và in ra mức doanh số của tháng đó",
    "input_sample": [
      "5",
      "3000",
      "2500",
      "4000",
      "2200",
      "3500"
    ],
    "output_sample": [
      "4",
      "2200"
    ],
    "point": "90",
    "short_name": "MINSALES"
  },
  {
    "code_sample": [
      "n = int(input())",
      "traffic = []",
      "for _ in range(n):",
      "    traffic.append(int(input()))",
      "last = traffic[-1]",
      "next_month = int(last * 1.1 + 0.5)",
      "print(next_month)"
    ],
    "id": "Dự đoán lưu lượng truy cập nếu lưu lượng tăng đều 10% mỗi tháng",
    "input_sample": [
      "5",
      "100",
      "110",
      "121",
      "133",
      "146"
    ],
    "output_sample": [
      "160"
    ],
    "point": "90",
    "short_name": "TRAFFIC10"
  },
  {
    "code_sample": [
      "n = int(input())",
      "traffic = []",
      "for _ in range(n):",
      "    traffic.append(int(input()))",
      "if traffic[0] > traffic[1]:",
      "    print('Thang 1')",
      "    print(traffic[0] - traffic[1])",
      "elif traffic[1] > traffic[0]:",
      "    print('Thang 2')",
      "    print(traffic[1] - traffic[0])",
      "else:",
      "    print('Bang nhau')",
      "    print(0)"
    ],
    "id": "So sánh lưu lượng truy cập giữa hai tháng và xác định tháng nào có lưu lượng cao hơn",
    "input_sample": [
      "2",
      "120",
      "150"
    ],
    "output_sample": [
      "Thang 2",
      "30"
    ],
    "point": "90",
    "short_name": "CMPTRAFF"
  },
  {
    "code_sample": [
      "n = int(input())",
      "traffic = []",
      "for _ in range(n):",
      "    traffic.append(int(input()))",
      "total = 0",
      "for t in traffic:",
      "    total += t",
      "avg = total // n",
      "print(avg)"
    ],
    "id": "Tính lưu lượng truy cập trung bình hàng tháng trong n tháng",
    "input_sample": [
      "3",
      "100",
      "200",
      "300"
    ],
    "output_sample": [
      "200"
    ],
    "point": "90",
    "short_name": "AVGTRAFF"
  },
  {
    "code_sample": [
      "n = int(input())",
      "clients = []",
      "for _ in range(n):",
      "    clients.append(int(input()))",
      "total = 0",
      "for c in clients:",
      "    total += c",
      "avg = total // n",
      "print(avg)"
    ],
    "id": "Tính số lượng khách hàng trung bình mỗi ngày trong tuần",
    "input_sample": [
      "7",
      "10",
      "20",
      "30",
      "40",
      "50",
      "60",
      "70"
    ],
    "output_sample": [
      "40"
    ],
    "point": "90",
    "short_name": "AVGCLIENT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "clients = []",
      "for _ in range(n):",
      "    clients.append(int(input()))",
      "min_client = clients[0]",
      "for c in clients:",
      "    if c < min_client:",
      "        min_client = c",
      "print(min_client)"
    ],
    "id": "Xác định ngày có lượng khách hàng ít nhất và in ra số lượng khách hàng trong ngày đó",
    "input_sample": [
      "7",
      "15",
      "10",
      "20",
      "25",
      "8",
      "30",
      "12"
    ],
    "output_sample": [
      "8"
    ],
    "point": "90",
    "short_name": "MINCLIENT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "clients = []",
      "for _ in range(n):",
      "    clients.append(int(input()))",
      "max_growth = clients[1] - clients[0]",
      "day = 2",
      "for i in range(1, n):",
      "    growth = clients[i] - clients[i-1]",
      "    if growth > max_growth:",
      "        max_growth = growth",
      "        day = i + 1",
      "print(day)",
      "print(max_growth)"
    ],
    "id": "So sánh lượng khách hàng giữa hai ngày liên tiếp và xác định ngày có sự tăng trưởng lớn nhất",
    "input_sample": [
      "7",
      "10",
      "15",
      "12",
      "20",
      "25",
      "18",
      "30"
    ],
    "output_sample": [
      "5",
      "13"
    ],
    "point": "110",
    "short_name": "MAXGROWTH"
  },
  {
    "code_sample": [
      "n = int(input())",
      "hours = []",
      "for _ in range(n):",
      "    hours.append(int(input()))",
      "avg = sum(hours) / n",
      "print(avg)"
    ],
    "id": "Tính số giờ làm việc trung bình của mỗi ca trong tuần",
    "input_sample": [
      "5",
      "8",
      "7",
      "9",
      "6",
      "10"
    ],
    "output_sample": [
      "8.0"
    ],
    "point": "80",
    "short_name": "AVGWORK"
  },
  {
    "code_sample": [
      "n = int(input())",
      "hours = []",
      "for _ in range(n):",
      "    hours.append(int(input()))",
      "min_hours = min(hours)",
      "print(min_hours)"
    ],
    "id": "Xác định ca làm việc có số giờ ít nhất và in ra số giờ của ca đó",
    "input_sample": [
      "4",
      "8",
      "6",
      "7",
      "5"
    ],
    "output_sample": [
      "5"
    ],
    "point": "80",
    "short_name": "MINSHIFT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "hours = []",
      "for _ in range(n):",
      "    hours.append(int(input()))",
      "max_diff = -1",
      "max_idx = -1",
      "for i in range(1, n):",
      "    diff = hours[i] - hours[i-1]",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        max_idx = i + 1",
      "print(max_idx)",
      "print(max_diff)"
    ],
    "id": "So sánh số giờ làm việc giữa hai ca liên tiếp và xác định ca có sự tăng trưởng lớn nhất về số giờ làm việc",
    "input_sample": [
      "5",
      "6",
      "7",
      "8",
      "5",
      "9"
    ],
    "output_sample": [
      "5",
      "4"
    ],
    "point": "140",
    "short_name": "SHIFTINC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    total += int(input())",
      "avg = total // n",
      "print(avg)"
    ],
    "id": "Tính giá trị trung bình của các đơn hàng trong tháng",
    "input_sample": [
      "5",
      "100",
      "200",
      "150",
      "250",
      "300"
    ],
    "output_sample": [
      "200"
    ],
    "point": "110",
    "short_name": "AVGORDER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_val = None",
      "for _ in range(n):",
      "    val = int(input())",
      "    if min_val is None or val < min_val:",
      "        min_val = val",
      "print(min_val)"
    ],
    "id": "Xác định đơn hàng có giá trị thấp nhất và in ra giá trị của đơn hàng đó",
    "input_sample": [
      "5",
      "100",
      "200",
      "50",
      "250",
      "300"
    ],
    "output_sample": [
      "50"
    ],
    "point": "110",
    "short_name": "MINORDER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "orders = []",
      "for _ in range(n):",
      "    orders.append(int(input()))",
      "max_diff = -1",
      "max_pos = -1",
      "for i in range(1, n):",
      "    diff = orders[i] - orders[i-1]",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        max_pos = i + 1",
      "print(max_pos)",
      "print(max_diff)"
    ],
    "id": "So sánh giá trị đơn hàng giữa hai đơn hàng liên tiếp và xác định đơn hàng có sự tăng trưởng lớn nhất",
    "input_sample": [
      "5",
      "100",
      "150",
      "120",
      "180",
      "200"
    ],
    "output_sample": [
      "5",
      "20"
    ],
    "point": "120",
    "short_name": "MAXGROWTH"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "avg = sum(times) / n",
      "print(avg)"
    ],
    "id": "Tính thời gian trung bình hoàn thành mỗi công việc",
    "input_sample": [
      "5",
      "2",
      "3",
      "5",
      "7",
      "8"
    ],
    "output_sample": [
      "5.0"
    ],
    "point": "90",
    "short_name": "AVG_TIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "print(min(times))"
    ],
    "id": "Xác định công việc có thời gian hoàn thành ngắn nhất và in ra thời gian của công việc đó",
    "input_sample": [
      "5",
      "3",
      "2",
      "5",
      "1",
      "4"
    ],
    "output_sample": [
      "1"
    ],
    "point": "80",
    "short_name": "MIN_TIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "for i in range(n - 1):",
      "    if times[i] > times[i + 1]:",
      "        print(i + 1, times[i], times[i] - times[i + 1])",
      "    elif times[i] < times[i + 1]:",
      "        print(i + 2, times[i + 1], times[i + 1] - times[i])"
    ],
    "id": "So sánh thời gian hoàn thành giữa hai công việc liên tiếp và xác định công việc nào có thời gian dài hơn",
    "input_sample": [
      "5",
      "3",
      "7",
      "2",
      "6",
      "4"
    ],
    "output_sample": [
      "1 7 4",
      "2 7 5",
      "3 6 1",
      "4 6 2"
    ],
    "point": "110",
    "short_name": "CMP_TIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "water = []",
      "for _ in range(n):",
      "    water.append(int(input()))",
      "total = 0",
      "for w in water:",
      "    total += w",
      "avg = total // n",
      "print(avg)"
    ],
    "id": "Tính lượng nước tiêu thụ trung bình mỗi ngày trong tháng",
    "input_sample": [
      "5",
      "10",
      "20",
      "30",
      "40",
      "50"
    ],
    "output_sample": [
      "30"
    ],
    "point": "110",
    "short_name": "AVG_WATER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "water = []",
      "for _ in range(n):",
      "    water.append(int(input()))",
      "min_water = water[0]",
      "for w in water:",
      "    if w < min_water:",
      "        min_water = w",
      "print(min_water)"
    ],
    "id": "Xác định ngày có lượng nước tiêu thụ ít nhất và in ra số lượng nước tiêu thụ trong ngày đó",
    "input_sample": [
      "4",
      "15",
      "20",
      "10",
      "25"
    ],
    "output_sample": [
      "10"
    ],
    "point": "90",
    "short_name": "MINWATER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "water = []",
      "for _ in range(n):",
      "    water.append(int(input()))",
      "max_increase = water[1] - water[0]",
      "day = 2",
      "for i in range(1, n):",
      "    diff = water[i] - water[i-1]",
      "    if diff > max_increase:",
      "        max_increase = diff",
      "        day = i + 1",
      "print(day)",
      "print(max_increase)"
    ],
    "id": "So sánh lượng nước tiêu thụ giữa hai ngày liên tiếp và xác định ngày có sự tăng trưởng lớn nhất về lượng nước tiêu thụ",
    "input_sample": [
      "5",
      "10",
      "15",
      "12",
      "20",
      "25"
    ],
    "output_sample": [
      "5",
      "13"
    ],
    "point": "120",
    "short_name": "WATERGROW"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_free = 0",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    total_free += (end - start)",
      "average = total_free / n",
      "print(average)"
    ],
    "id": "Tính thời gian rảnh trung bình trong ngày",
    "input_sample": [
      "3",
      "8 10",
      "13 14",
      "19 21"
    ],
    "output_sample": [
      "2.0"
    ],
    "point": "130",
    "short_name": "AVGFREE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_free = 24",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    duration = end - start",
      "    if duration < min_free:",
      "        min_free = duration",
      "print(min_free)"
    ],
    "id": "Xác định khoảng thời gian rảnh ngắn nhất và in ra số giờ của khoảng thời gian đó",
    "input_sample": [
      "3",
      "8 10",
      "13 14",
      "19 21"
    ],
    "output_sample": [
      "1"
    ],
    "point": "110",
    "short_name": "MINFREE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    times.append((start, end))",
      "max_diff = -1",
      "res = ()",
      "for i in range(n - 1):",
      "    dur1 = times[i][1] - times[i][0]",
      "    dur2 = times[i+1][1] - times[i+1][0]",
      "    if dur2 > dur1 and dur2 - dur1 > max_diff:",
      "        max_diff = dur2 - dur1",
      "        res = times[i+1]",
      "    elif dur1 > dur2 and dur1 - dur2 > max_diff:",
      "        max_diff = dur1 - dur2",
      "        res = times[i]",
      "print(res[0], res[1])",
      "print(max_diff)"
    ],
    "id": "So sánh thời gian rảnh giữa hai khoảng thời gian liên tiếp và xác định khoảng nào dài hơn",
    "input_sample": [
      "3",
      "8 10",
      "13 14",
      "19 22"
    ],
    "output_sample": [
      "19 22",
      "3"
    ],
    "point": "150",
    "short_name": "CMPFREE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    line = input().split()",
      "    cost = int(line[-1])",
      "    total += cost",
      "print(total // n)"
    ],
    "id": "Tính chi phí trung bình hàng tháng cho tất cả các loại chi phí",
    "input_sample": [
      "3",
      "Điện 1200",
      "Nước 800",
      "Internet 500"
    ],
    "output_sample": [
      "833"
    ],
    "point": "100",
    "short_name": "AVGEXP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = 10**9",
      "for _ in range(n):",
      "    line = input().split()",
      "    cost = int(line[-1])",
      "    if cost < min_cost:",
      "        min_cost = cost",
      "print(min_cost)"
    ],
    "id": "Xác định loại chi phí thấp nhất và in ra giá trị của loại chi phí đó",
    "input_sample": [
      "3",
      "Điện 1200",
      "Nước 800",
      "Internet 500"
    ],
    "output_sample": [
      "500"
    ],
    "point": "100",
    "short_name": "MINEXP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "costs = []",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = ' '.join(line[:-1])",
      "    val = int(line[-1])",
      "    costs.append((name, val))",
      "for i in range(n-1):",
      "    if costs[i][1] > costs[i+1][1]:",
      "        diff = costs[i][1] - costs[i+1][1]",
      "        print(costs[i][0], diff)",
      "    else:",
      "        diff = costs[i+1][1] - costs[i][1]",
      "        print(costs[i+1][0], diff)"
    ],
    "id": "So sánh giá trị giữa hai loại chi phí liên tiếp và xác định loại nào cao hơn",
    "input_sample": [
      "3",
      "Điện 1200",
      "Nước 800",
      "Internet 1500"
    ],
    "output_sample": [
      "Internet 700",
      "Điện 400"
    ],
    "point": "140",
    "short_name": "CMPEXP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "next_time = int(times[-1] * 1.05)",
      "print(next_time)"
    ],
    "id": "Dự đoán thời gian giao hàng nếu thời gian giao hàng tăng đều 5% cho mỗi đơn hàng",
    "input_sample": [
      "4",
      "100",
      "105",
      "110",
      "115"
    ],
    "output_sample": [
      "120"
    ],
    "point": "70",
    "short_name": "DELIVER"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "max_diff = -1",
      "order = -1",
      "for i in range(n - 1):",
      "    diff = abs(times[i] - times[i+1])",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        if times[i] > times[i+1]:",
      "            order = i + 1",
      "        else:",
      "            order = i + 2",
      "print(order, max_diff)"
    ],
    "id": "So sánh thời gian giao hàng giữa hai đơn hàng liên tiếp và xác định đơn hàng nào mất nhiều thời gian hơn",
    "input_sample": [
      "3",
      "10",
      "15",
      "12"
    ],
    "output_sample": [
      "2 5"
    ],
    "point": "70",
    "short_name": "COMPAREDLV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "avg = sum(times) // n",
      "print(avg)"
    ],
    "id": "Tính thời gian giao hàng trung bình cho tất cả các đơn hàng trong ngày",
    "input_sample": [
      "4",
      "10",
      "15",
      "20",
      "25"
    ],
    "output_sample": [
      "17"
    ],
    "point": "70",
    "short_name": "AVGDLV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "ages = []",
      "for _ in range(n):",
      "    ages.append(int(input()))",
      "print(min(ages), max(ages))"
    ],
    "id": "Xác định độ tuổi trẻ nhất và cao tuổi nhất trong nhóm",
    "input_sample": [
      "5",
      "12",
      "45",
      "23",
      "56",
      "34"
    ],
    "output_sample": [
      "12 56"
    ],
    "point": "80",
    "short_name": "AGEBOUND"
  },
  {
    "code_sample": [
      "n = int(input())",
      "ages = []",
      "for _ in range(n):",
      "    ages.append(int(input()))",
      "count = 0",
      "for age in ages:",
      "    if age < 25:",
      "        count += 1",
      "percent = (count / n) * 100",
      "print(percent)"
    ],
    "id": "Tính tỷ lệ phần trăm người dưới 25 tuổi trong nhóm",
    "input_sample": [
      "5",
      "20",
      "30",
      "15",
      "27",
      "23"
    ],
    "output_sample": [
      "60.0"
    ],
    "point": "100",
    "short_name": "UNDER25"
  },
  {
    "code_sample": [
      "n, m = map(int, input().split())",
      "group1 = []",
      "group2 = []",
      "for _ in range(n):",
      "    group1.append(int(input()))",
      "for _ in range(m):",
      "    group2.append(int(input()))",
      "avg1 = sum(group1) / n",
      "avg2 = sum(group2) / m",
      "if avg1 > avg2:",
      "    print('Group 1')",
      "    print(avg1)",
      "else:",
      "    print('Group 2')",
      "    print(avg2)"
    ],
    "id": "So sánh độ tuổi trung bình giữa hai nhóm dân số và xác định nhóm nào có độ tuổi trung bình cao hơn",
    "input_sample": [
      "3 4",
      "20",
      "25",
      "30",
      "22",
      "28",
      "35",
      "40"
    ],
    "output_sample": [
      "Group 2",
      "31.25"
    ],
    "point": "120",
    "short_name": "AVGAGEGRP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    total += (end - start)",
      "avg = total / n",
      "print(avg)"
    ],
    "id": "Tính thời gian học tập trung bình trong ngày",
    "input_sample": [
      "3",
      "8 10",
      "13 15",
      "18 20"
    ],
    "output_sample": [
      "2.0"
    ],
    "point": "110",
    "short_name": "AVGSTUDY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_time = 24",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    duration = end - start",
      "    if duration < min_time:",
      "        min_time = duration",
      "print(min_time)"
    ],
    "id": "Xác định khoảng thời gian học tập ngắn nhất và in ra số giờ của khoảng thời gian đó",
    "input_sample": [
      "3",
      "8 10",
      "13 14",
      "18 21"
    ],
    "output_sample": [
      "1"
    ],
    "point": "90",
    "short_name": "MINSTUDY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    start, end = map(int, input().split())",
      "    times.append(end - start)",
      "max_diff = -1",
      "idx_max = -1",
      "for i in range(n - 1):",
      "    diff = abs(times[i] - times[i+1])",
      "    if diff > max_diff:",
      "        max_diff = diff",
      "        idx_max = i",
      "if times[idx_max] > times[idx_max + 1]:",
      "    print(idx_max + 1, idx_max + 2)",
      "    print(times[idx_max] - times[idx_max + 1])",
      "else:",
      "    print(idx_max + 2, idx_max + 1)",
      "    print(times[idx_max + 1] - times[idx_max])"
    ],
    "id": "So sánh thời gian học tập giữa hai khoảng thời gian liên tiếp và xác định khoảng nào dài hơn",
    "input_sample": [
      "3",
      "8 10",
      "11 14",
      "15 16"
    ],
    "output_sample": [
      "2 3",
      "1"
    ],
    "point": "130",
    "short_name": "CMPSTUDY"
  },
  {
    "code_sample": [
      "n = int(input())",
      "profits = []",
      "for _ in range(n):",
      "    profits.append(int(input()))",
      "avg = sum(profits) // n",
      "print(avg)"
    ],
    "id": "Tính lợi nhuận trung bình từ các khoản đầu tư",
    "input_sample": [
      "5",
      "100",
      "200",
      "150",
      "250",
      "300"
    ],
    "output_sample": [
      "200"
    ],
    "point": "80",
    "short_name": "AVGPROFIT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "profits = []",
      "for _ in range(n):",
      "    profits.append(int(input()))",
      "print(min(profits))"
    ],
    "id": "Xác định khoản đầu tư có lợi nhuận thấp nhất và in ra giá trị lợi nhuận của khoản đó",
    "input_sample": [
      "5",
      "100",
      "200",
      "150",
      "250",
      "90"
    ],
    "output_sample": [
      "90"
    ],
    "point": "80",
    "short_name": "MINPROFIT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "profits = []",
      "for _ in range(n):",
      "    profits.append(int(input()))",
      "for i in range(n - 1):",
      "    if profits[i] > profits[i + 1]:",
      "        print(i + 1, profits[i] - profits[i + 1])",
      "    elif profits[i] < profits[i + 1]:",
      "        print(i + 2, profits[i + 1] - profits[i])"
    ],
    "id": "So sánh lợi nhuận giữa hai khoản đầu tư liên tiếp và xác định khoản nào có lợi nhuận cao hơn",
    "input_sample": [
      "5",
      "100",
      "200",
      "150",
      "250",
      "180"
    ],
    "output_sample": [
      "2 100",
      "4 100"
    ],
    "point": "110",
    "short_name": "INVESTCMP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "costs = []",
      "for _ in range(n):",
      "    costs.append(int(input()))",
      "last = costs[-1]",
      "pred = int(last * 1.1 + 0.5)",
      "print(pred)"
    ],
    "id": "Dự đoán chi phí bảo trì nếu chi phí tăng đều 10% mỗi tháng",
    "input_sample": [
      "3",
      "100",
      "110",
      "121"
    ],
    "output_sample": [
      "133"
    ],
    "point": "90",
    "short_name": "COSTPRED"
  },
  {
    "code_sample": [
      "n = int(input())",
      "costs = []",
      "for _ in range(n):",
      "    costs.append(int(input()))",
      "for i in range(n-1):",
      "    if costs[i] > costs[i+1]:",
      "        print('Thang', i+1, costs[i] - costs[i+1])",
      "    else:",
      "        print('Thang', i+2, costs[i+1] - costs[i])"
    ],
    "id": "So sánh chi phí bảo trì giữa hai tháng liên tiếp và xác định tháng nào có chi phí cao hơn",
    "input_sample": [
      "3",
      "100",
      "150",
      "130"
    ],
    "output_sample": [
      "Thang 2 50"
    ],
    "point": "110",
    "short_name": "MAINTCMP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "costs = []",
      "for _ in range(n):",
      "    costs.append(int(input()))",
      "avg = sum(costs) // n",
      "print(avg)"
    ],
    "id": "Tính chi phí bảo trì trung bình hàng tháng cho tất cả các tháng đã qua",
    "input_sample": [
      "3",
      "100",
      "150",
      "130"
    ],
    "output_sample": [
      "126"
    ],
    "point": "110",
    "short_name": "MAINTAVG"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "items = []",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = line[0]",
      "    qty = int(line[1])",
      "    items.append((name, qty))",
      "    total += qty",
      "avg = total // n",
      "for name, qty in items:",
      "    print(name, avg)"
    ],
    "id": "Tính doanh số trung bình của mỗi mặt hàng trong tháng",
    "input_sample": [
      "3",
      "Banh 10",
      "Keo 15",
      "Nuoc 25"
    ],
    "output_sample": [
      "Banh 10",
      "Keo 15",
      "Nuoc 25"
    ],
    "point": "130",
    "short_name": "AVGSALES"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_qty = None",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = line[0]",
      "    qty = int(line[1])",
      "    if min_qty is None or qty < min_qty:",
      "        min_qty = qty",
      "print(min_qty)"
    ],
    "id": "Xác định mặt hàng bán chậm nhất và in ra số lượng bán của mặt hàng đó",
    "input_sample": [
      "3",
      "Banh 10",
      "Keo 5",
      "Nuoc 20"
    ],
    "output_sample": [
      "5"
    ],
    "point": "110",
    "short_name": "SLOWSELL"
  },
  {
    "code_sample": [
      "n = int(input())",
      "items = []",
      "for _ in range(n):",
      "    line = input().split()",
      "    name = line[0]",
      "    qty = int(line[1])",
      "    items.append((name, qty))",
      "for i in range(n-1):",
      "    if items[i][1] > items[i+1][1]:",
      "        print(items[i][0], items[i][1])",
      "        print(items[i+1][0], items[i+1][1])",
      "    else:",
      "        print(items[i+1][0], items[i+1][1])",
      "        print(items[i][0], items[i][1])",
      "    break"
    ],
    "id": "So sánh doanh số giữa hai mặt hàng liên tiếp và xác định mặt hàng nào bán chạy hơn",
    "input_sample": [
      "3",
      "Banh 10",
      "Keo 5",
      "Nuoc 20"
    ],
    "output_sample": [
      "Banh 10",
      "Keo 5"
    ],
    "point": "120",
    "short_name": "COMPARESALE"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total = 0",
      "for _ in range(n):",
      "    total += int(input())",
      "avg = total / n",
      "print(avg)"
    ],
    "id": "Tính thời gian tập luyện trung bình mỗi ngày trong tuần",
    "input_sample": [
      "3",
      "2",
      "3",
      "4"
    ],
    "output_sample": [
      "3.0"
    ],
    "point": "80",
    "short_name": "AVGTIME"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "print(min(times))"
    ],
    "id": "Xác định ngày có thời gian tập luyện ngắn nhất và in ra số giờ của ngày đó",
    "input_sample": [
      "4",
      "3",
      "2",
      "5",
      "1"
    ],
    "output_sample": [
      "1"
    ],
    "point": "90",
    "short_name": "MINWORKOUT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "times = []",
      "for _ in range(n):",
      "    times.append(int(input()))",
      "for i in range(1, n):",
      "    if times[i] > times[i-1]:",
      "        print(f'Ngày {i+1} dài hơn ngày {i} {times[i] - times[i-1]}')",
      "    elif times[i] < times[i-1]:",
      "        print(f'Ngày {i} dài hơn ngày {i+1} {times[i-1] - times[i]}')",
      "    else:",
      "        print(f'Ngày {i} và ngày {i+1} bằng nhau')"
    ],
    "id": "So sánh thời gian tập luyện giữa hai ngày liên tiếp và xác định ngày nào có thời gian dài hơn",
    "input_sample": [
      "4",
      "2",
      "5",
      "3",
      "6"
    ],
    "output_sample": [
      "Ngày 2 dài hơn ngày 1 3",
      "Ngày 4 dài hơn ngày 3 3"
    ],
    "point": "120",
    "short_name": "CMPWORKOUT"
  },
  {
    "code_sample": [
      "n = int(input())",
      "total_cost = 0",
      "for _ in range(n):",
      "    w, c = map(int, input().split())",
      "    total_cost += c",
      "avg_cost = total_cost // n",
      "print(avg_cost)"
    ],
    "id": "Tính chi phí vận chuyển trung bình của mỗi gói hàng",
    "input_sample": [
      "3",
      "10 50",
      "5 25",
      "8 40"
    ],
    "output_sample": [
      "38"
    ],
    "point": "110",
    "short_name": "AVGSHIPC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "min_cost = 10**9",
      "for _ in range(n):",
      "    w, c = map(int, input().split())",
      "    if c < min_cost:",
      "        min_cost = c",
      "print(min_cost)"
    ],
    "id": "Xác định gói hàng có chi phí vận chuyển thấp nhất và in ra chi phí của gói đó",
    "input_sample": [
      "3",
      "10 50",
      "5 25",
      "8 40"
    ],
    "output_sample": [
      "25"
    ],
    "point": "110",
    "short_name": "MINSHIPC"
  },
  {
    "code_sample": [
      "n = int(input())",
      "packages = []",
      "for _ in range(n):",
      "    w, c = map(int, input().split())",
      "    packages.append(c)",
      "for i in range(n - 1):",
      "    if packages[i] > packages[i + 1]:",
      "        print(i + 1, packages[i] - packages[i + 1])",
      "    elif packages[i] < packages[i + 1]:",
      "        print(i + 2, packages[i + 1] - packages[i])",
      "    else:",
      "        print(i + 1, 0)"
    ],
    "id": "So sánh chi phí vận chuyển giữa hai gói hàng liên tiếp và xác định gói nào có chi phí cao hơn",
    "input_sample": [
      "4",
      "10 50",
      "5 60",
      "7 55",
      "8 70"
    ],
    "output_sample": [
      "2 10",
      "4 15",
      "2 5"
    ],
    "point": "130",
    "short_name": "CMP_SHIP"
  },
  {
    "code_sample": [
      "n = int(input())",
      "revenue = []",
      "for _ in range(n):",
      "    revenue.append(float(input()))",
      "for i in range(n):",
      "    predicted = revenue[i] * 1.1",
      "    print(round(predicted, 2))"
    ],
    "id": "Dự đoán doanh thu nếu doanh thu tăng đều 10% mỗi tháng",
    "input_sample": [
      "3",
      "100",
      "110",
      "121"
    ],
    "output_sample": [
      "146.41",
      "161.05",
      "177.15"
    ],
    "point": "110",
    "short_name": "PREDREV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "revenues = []",
      "for _ in range(n):",
      "    revenues.append(int(input()))",
      "for i in range(1, n):",
      "    diff = revenues[i] - revenues[i-1]",
      "    if diff > 0:",
      "        print(f'Thang {i+1} cao hon Thang {i} {diff}')",
      "    elif diff < 0:",
      "        print(f'Thang {i+1} thap hon Thang {i} {abs(diff)}')",
      "    else:",
      "        print(f'Thang {i+1} bang Thang {i} 0')"
    ],
    "id": "So sánh doanh thu giữa hai tháng liên tiếp và xác định tháng nào có doanh thu cao hơn",
    "input_sample": [
      "4",
      "100",
      "120",
      "110",
      "130"
    ],
    "output_sample": [
      "Thang 2 cao hon Thang 1 20",
      "Thang 3 thap hon Thang 2 10",
      "Thang 4 cao hon Thang 3 20"
    ],
    "point": "90",
    "short_name": "CMPREV"
  },
  {
    "code_sample": [
      "n = int(input())",
      "revenues = []",
      "for _ in range(n):",
      "    revenues.append(int(input()))",
      "avg = sum(revenues) // n",
      "print(avg)"
    ],
    "id": "Tính doanh thu trung bình hàng tháng cho tất cả các tháng đã qua",
    "input_sample": [
      "4",
      "100",
      "120",
      "110",
      "130"
    ],
    "output_sample": [
      "115"
    ],
    "point": "70",
    "short_name": "AVGREV"
  }
]